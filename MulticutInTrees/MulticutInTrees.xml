<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MulticutInTrees</name>
    </assembly>
    <members>
        <member name="T:MulticutInTrees.Algorithms.Algorithm">
            <summary>
            Abstract class for an algorithm that solves the Multicut in Trees problem.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Algorithms.Algorithm.ReductionRules">
            <summary>
            The <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of reduction rules (of type <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/>) this <see cref="T:MulticutInTrees.Algorithms.Algorithm"/> uses.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Algorithms.Algorithm.DemandPairs">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s in the input.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Algorithms.Algorithm.Input">
            <summary>
            The input <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Algorithms.Algorithm.PartialSolution">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1"/> of tuples of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s that contains the already found part of the solution.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Algorithms.Algorithm.K">
            <summary>
            The size the cutset is allowed to be.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Algorithms.Algorithm.LastIterationEdgeContraction">
            <summary>
            <see langword="true"/> if in the last iteration an edge was contracted, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Algorithms.Algorithm.LastIterationDemandPairRemoval">
            <summary>
            <see langword="true"/> if in the last iteration a demand pair was removed, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Algorithms.Algorithm.LastIterationDemandPairChange">
            <summary>
            <see langword="true"/> if in the last iteration a demand pair was changed, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Algorithms.Algorithm.LastContractedEdges">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of all edges that were removed in the last iteration, their contracted nodes, and the <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s on the contracted edge.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Algorithms.Algorithm.LastRemovedDemandPairs">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of all <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s that were removed in the last iteration.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Algorithms.Algorithm.LastChangedEdgesPerDemandPair">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of tuples of changed edges for a <see cref="T:MulticutInTrees.Utilities.DemandPair"/> and the <see cref="T:MulticutInTrees.Utilities.DemandPair"/> itself.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Algorithms.Algorithm.#ctor(MulticutInTrees.Graphs.Tree{MulticutInTrees.Graphs.TreeNode},System.Collections.Generic.List{MulticutInTrees.Utilities.DemandPair},System.Int32)">
            <summary>
            Constructor for an <see cref="T:MulticutInTrees.Algorithms.Algorithm"/>.
            </summary>
            <param name="input">The <see cref="T:MulticutInTrees.Graphs.Tree`1"/> of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s in the instance.</param>
            <param name="demandPairs">The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s in the instance.</param>
            <param name="k">The size the cutset is allowed to be.</param>
        </member>
        <member name="M:MulticutInTrees.Algorithms.Algorithm.Run">
            <summary>
            Try to solve the instance.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Algorithms.Algorithm.Preprocess">
            <summary>
            Computes all information needed prior to the first iteration of the algorithm.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Algorithms.Algorithm.CutEdge(System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode})">
            <summary>
            Add this edge to the solution, remove all <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s that go over this edge, and contract it.
            </summary>
            <param name="edge">The tuple of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s representing the edge to be cut.</param>
        </member>
        <member name="M:MulticutInTrees.Algorithms.Algorithm.CutEdges(System.Collections.Generic.IEnumerable{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode}})">
            <summary>
            Add multiple edges to the solution, remove all <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s that go over these edges, and contract them.
            </summary>
            <param name="edges">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of tuples of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s that represent the edges to be cut.</param>
        </member>
        <member name="M:MulticutInTrees.Algorithms.Algorithm.ContractEdge(System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode})">
            <summary>
            Contract an edge.
            </summary>
            <param name="edge">The tuple of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s representing the edge to be contracted.</param>
        </member>
        <member name="M:MulticutInTrees.Algorithms.Algorithm.ContractEdges(System.Collections.Generic.IEnumerable{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode}})">
            <summary>
            Contract multiple edges.
            </summary>
            <param name="edges">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of tuples of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s representing the edges to be contracted.</param>
        </member>
        <member name="M:MulticutInTrees.Algorithms.Algorithm.RemoveDemandPair(MulticutInTrees.Utilities.DemandPair)">
            <summary>
            Remove a <see cref="T:MulticutInTrees.Utilities.DemandPair"/> from the problem instance.
            </summary>
            <param name="demandPair">The <see cref="T:MulticutInTrees.Utilities.DemandPair"/> to be removed.</param>
        </member>
        <member name="M:MulticutInTrees.Algorithms.Algorithm.RemoveDemandPairs(System.Collections.Generic.IEnumerable{MulticutInTrees.Utilities.DemandPair})">
            <summary>
            Remove multiple <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s from the problem instance.
            </summary>
            <param name="demandPairs">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s to be removed.</param>
        </member>
        <member name="M:MulticutInTrees.Algorithms.Algorithm.ChangeEndpointOfDemandPair(MulticutInTrees.Utilities.DemandPair,MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode)">
            <summary>
            Change an endpoint of a <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.
            </summary>
            <param name="demandPair">The <see cref="T:MulticutInTrees.Utilities.DemandPair"/> whose endpoint changes.</param>
            <param name="oldEndpoint">The old endpoint of <paramref name="demandPair"/>.</param>
            <param name="newEndpoint">The new endpoint of <paramref name="demandPair"/>.</param>
        </member>
        <member name="M:MulticutInTrees.Algorithms.Algorithm.ChangeEndpointOfDemandPairs(System.Collections.Generic.IEnumerable{System.ValueTuple{MulticutInTrees.Utilities.DemandPair,MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode}})">
            <summary>
            Change an endpoint of multiple <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s.
            </summary>
            <param name="demandPairEndpointTuples">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of tuples containing the <see cref="T:MulticutInTrees.Utilities.DemandPair"/> that is changed, the <see cref="T:MulticutInTrees.Graphs.TreeNode"/> old endpoint and <see cref="T:MulticutInTrees.Graphs.TreeNode"/> new endpoint.</param>
        </member>
        <member name="T:MulticutInTrees.Algorithms.GuoNiedermeierFPT">
            <summary>
            Implementation of the FPT algorithm by Guo and Niedermeier.
            <br/>
            Source: <see href="https://doi.org/10.1002/net.20081"/>
            </summary>
        </member>
        <member name="P:MulticutInTrees.Algorithms.GuoNiedermeierFPT.DemandPairsPerEdge">
            <summary>
            Dictionary containing a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s per edge, represented by a tuple of two <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Algorithms.GuoNiedermeierFPT.#ctor(MulticutInTrees.Graphs.Tree{MulticutInTrees.Graphs.TreeNode},System.Collections.Generic.List{MulticutInTrees.Utilities.DemandPair},System.Int32)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Algorithms.GuoNiedermeierFPT"/>.
            </summary>
            <param name="input">The <see cref="T:MulticutInTrees.Graphs.Tree`1"/> with <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s the algorithm should run on.</param>
            <param name="demandPairs">The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s that exist in the instance.</param>
            <param name="k">The size the cutset is allowed to be.</param>
        </member>
        <member name="M:MulticutInTrees.Algorithms.GuoNiedermeierFPT.CreateReductionRules">
            <summary>
            Create the <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/>s used by this algorithm.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Algorithms.GuoNiedermeierFPT.FillDemandPathsPerEdge">
            <summary>
            Fills <see cref="P:MulticutInTrees.Algorithms.GuoNiedermeierFPT.DemandPairsPerEdge"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Algorithms.GuoNiedermeierFPT.RemoveDemandPairFromEdge(System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode},MulticutInTrees.Utilities.DemandPair)">
            <summary>
            Removes a <see cref="T:MulticutInTrees.Utilities.DemandPair"/> from a given edge in <see cref="P:MulticutInTrees.Algorithms.GuoNiedermeierFPT.DemandPairsPerEdge"/>.
            </summary>
            <param name="edge">The edge from which <paramref name="demandPair"/> should be removed.</param>
            <param name="demandPair">The <see cref="T:MulticutInTrees.Utilities.DemandPair"/> that should be removed from <paramref name="edge"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when either endpoint of <paramref name="edge"/> or <paramref name="demandPair"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Algorithms.GuoNiedermeierFPT.Preprocess">
            <inheritdoc/>
        </member>
        <member name="M:MulticutInTrees.Algorithms.GuoNiedermeierFPT.CutEdge(System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when either item of <paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Algorithms.GuoNiedermeierFPT.CutEdges(System.Collections.Generic.IEnumerable{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode}})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="edges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Algorithms.GuoNiedermeierFPT.ContractEdge(System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when either item of <paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Algorithms.GuoNiedermeierFPT.ContractEdges(System.Collections.Generic.IEnumerable{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode}})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="edges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Algorithms.GuoNiedermeierFPT.RemoveDemandPair(MulticutInTrees.Utilities.DemandPair)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="demandPair"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Algorithms.GuoNiedermeierFPT.RemoveDemandPairs(System.Collections.Generic.IEnumerable{MulticutInTrees.Utilities.DemandPair})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="demandPairs"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Algorithms.GuoNiedermeierFPT.ChangeEndpointOfDemandPair(MulticutInTrees.Utilities.DemandPair,MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="demandPair"/>, <paramref name="oldEndpoint"/> or <paramref name="newEndpoint"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Algorithms.GuoNiedermeierFPT.ChangeEndpointOfDemandPairs(System.Collections.Generic.IEnumerable{System.ValueTuple{MulticutInTrees.Utilities.DemandPair,MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode}})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="demandPairEndpointTuples"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:MulticutInTrees.Algorithms.NamespaceDoc">
            <summary>
            This part of the project contains all used algorithms to solve Multicut in Trees.
            </summary>
        </member>
        <member name="T:MulticutInTrees.Exceptions.AddNeighbourToSelfException">
            <summary>
            Represents an error for when a node tries to add itself as neighbour. Subclass of <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.AddNeighbourToSelfException.#ctor">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AddNeighbourToSelfException"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.AddNeighbourToSelfException.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AddNeighbourToSelfException"/> with a specified error message.
            </summary>
            <param name="message">The specified error message.</param>
        </member>
        <member name="M:MulticutInTrees.Exceptions.AddNeighbourToSelfException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AddNeighbourToSelfException"/> with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The specified error message.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:MulticutInTrees.Exceptions.AddParentAsChildException">
            <summary>
            Represents an error for when a node tries to add its parent as child. Subclass of <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.AddParentAsChildException.#ctor">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AddNeighbourToSelfException"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.AddParentAsChildException.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AddParentAsChildException"/> with a specified error message.
            </summary>
            <param name="message">The specified error message.</param>
        </member>
        <member name="M:MulticutInTrees.Exceptions.AddParentAsChildException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AddParentAsChildException"/> with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The specified error message.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:MulticutInTrees.Exceptions.AlreadyANeighbourException">
            <summary>
            Represents an error for when a node tries to add a node that is already one of its neighbours. Subclass of <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.AlreadyANeighbourException.#ctor">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AlreadyANeighbourException"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.AlreadyANeighbourException.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AlreadyANeighbourException"/> with a specified error message.
            </summary>
            <param name="message">The specified error message.</param>
        </member>
        <member name="M:MulticutInTrees.Exceptions.AlreadyANeighbourException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AlreadyANeighbourException"/> with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The specified error message.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:MulticutInTrees.Exceptions.AlreadyInGraphException">
            <summary>
            Represents an error for when a node or edge that is in a graph is added to the same graph again. Subclass of <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.AlreadyInGraphException.#ctor">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AlreadyInGraphException"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.AlreadyInGraphException.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AlreadyInGraphException"/> with a specified error message.
            </summary>
            <param name="message">The specified error message.</param>
        </member>
        <member name="M:MulticutInTrees.Exceptions.AlreadyInGraphException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AlreadyInGraphException"/> with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The specified error message.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:MulticutInTrees.Exceptions.IncompatibleTypesException">
            <summary>
            Represents an error for when two objects of different types are compared. Subclass of <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.IncompatibleTypesException.#ctor">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.IncompatibleTypesException"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.IncompatibleTypesException.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.IncompatibleTypesException"/> with a specified error message.
            </summary>
            <param name="message">The specified error message.</param>
        </member>
        <member name="M:MulticutInTrees.Exceptions.IncompatibleTypesException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.IncompatibleTypesException"/> with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The specified error message.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:MulticutInTrees.Exceptions.MultipleRootsException">
            <summary>
            Represents an error for when there are or will be multiple roots in a tree. Subclass of <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.MultipleRootsException.#ctor">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.MultipleRootsException"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.MultipleRootsException.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.MultipleRootsException"/> with a specified error message.
            </summary>
            <param name="message">The specified error message.</param>
        </member>
        <member name="M:MulticutInTrees.Exceptions.MultipleRootsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.MultipleRootsException"/> with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The specified error message.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:MulticutInTrees.Exceptions.NoRootException">
            <summary>
            Represents an error for when a tree does not have a root. Subclass of <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.NoRootException.#ctor">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AddNeighbourToSelfException"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.NoRootException.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AddNeighbourToSelfException"/> with a specified error message.
            </summary>
            <param name="message">The specified error message.</param>
        </member>
        <member name="M:MulticutInTrees.Exceptions.NoRootException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.AddNeighbourToSelfException"/> with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The specified error message.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:MulticutInTrees.Exceptions.NotANeighbourException">
            <summary>
            Represents an error for when a node tries to remove a node that is not its neighbour. Subclass of <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.NotANeighbourException.#ctor">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.NotANeighbourException"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.NotANeighbourException.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.NotANeighbourException"/> with a specified error message.
            </summary>
            <param name="message">The specified error message.</param>
        </member>
        <member name="M:MulticutInTrees.Exceptions.NotANeighbourException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.NotANeighbourException"/> with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The specified error message.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:MulticutInTrees.Exceptions.NotInGraphException">
            <summary>
            Represents an error for when a node or edge is used as though it were in a graph while it is not in that graph. Subclass of <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.NotInGraphException.#ctor">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.NotInGraphException"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.NotInGraphException.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.NotInGraphException"/> with a specified error message.
            </summary>
            <param name="message">The specified error message.</param>
        </member>
        <member name="M:MulticutInTrees.Exceptions.NotInGraphException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.NotInGraphException"/> with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The specified error message.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:MulticutInTrees.Exceptions.NotOnDemandPathException">
            <summary>
            Exception that occurs when a node or edge is used as if it were on the path of a <see cref="T:MulticutInTrees.Utilities.DemandPair"/> while it is not on that path.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.NotOnDemandPathException.#ctor">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.NotOnDemandPathException"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.NotOnDemandPathException.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.NotOnDemandPathException"/> with a specified error message.
            </summary>
            <param name="message">The specified error message.</param>
        </member>
        <member name="M:MulticutInTrees.Exceptions.NotOnDemandPathException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.NotOnDemandPathException"/> with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The specified error message.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:MulticutInTrees.Exceptions.ZeroLengthDemandPathException">
            <summary>
            Exception that occurs when a <see cref="T:MulticutInTrees.Utilities.DemandPair"/> has length 0.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.ZeroLengthDemandPathException.#ctor">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.ZeroLengthDemandPathException"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.ZeroLengthDemandPathException.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.ZeroLengthDemandPathException"/> with a specified error message.
            <param name="message">The specified error message.</param>
            </summary>
        </member>
        <member name="M:MulticutInTrees.Exceptions.ZeroLengthDemandPathException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.Exceptions.ZeroLengthDemandPathException"/> with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The specified error message.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:MulticutInTrees.Exceptions.NamespaceDoc">
            <summary>
            This namespace contains custom exceptions used throughout the project.
            </summary>
        </member>
        <member name="T:MulticutInTrees.Graphs.Graph`1">
            <summary>
            A graph that implements <see cref="T:MulticutInTrees.Graphs.IGraph`1"/> and consists of a class that implements <see cref="T:MulticutInTrees.Graphs.INode`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Graph`1.InternalEdges">
            <summary>
            The internal <see cref="T:System.Collections.Generic.List`1"/> of edges in this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Graph`1.UniqueInternalEdges">
            <summary>
            The internal <see cref="T:System.Collections.Generic.HashSet`1"/> of edges in this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Graph`1.UniqueInternalNodes">
            <summary>
            The internal <see cref="T:System.Collections.Generic.HashSet`1"/> of nodes in this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Graph`1.InternalNodes">
            <summary>
            The internal <see cref="T:System.Collections.Generic.List`1"/> of nodes in this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Graph`1.NumberOfNodes">
            <summary>
            The number of nodes in this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Graph`1.NumberOfEdges">
            <summary>
            The number of edges in this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Graph`1.Edges">
            <summary>
            The publically visible collection of edges in this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>. Edges cannot be edited directly.
            <br/>
            See also: <seealso cref="M:MulticutInTrees.Graphs.Graph`1.AddEdge(`0,`0,System.Boolean)"/>, <seealso cref="M:MulticutInTrees.Graphs.Graph`1.AddEdges(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`0}},System.Boolean)"/>, <seealso cref="M:MulticutInTrees.Graphs.Graph`1.RemoveEdge(`0,`0,System.Boolean)"/>, <seealso cref="M:MulticutInTrees.Graphs.Graph`1.RemoveEdges(System.Collections.Generic.IList{System.ValueTuple{`0,`0}},System.Boolean)"/> and <seealso cref="M:MulticutInTrees.Graphs.Graph`1.RemoveAllEdgesOfNode(`0,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Graph`1.Nodes">
            <summary>
            The publically visible collection of nodes in this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>. Nodes cannot be edited directly.
            <br/>
            See also: <seealso cref="M:MulticutInTrees.Graphs.Graph`1.AddNode(`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.Graph`1.AddNodes(System.Collections.Generic.IEnumerable{`0})"/>, <seealso cref="M:MulticutInTrees.Graphs.Graph`1.RemoveNode(`0)"/> and <seealso cref="M:MulticutInTrees.Graphs.Graph`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.#ctor">
            <summary>
            Constructor for a <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.#ctor(MulticutInTrees.Graphs.IGraph{`0})">
            <summary>
            Constructor for a <see cref="T:MulticutInTrees.Graphs.Graph`1"/> from any type that implements <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
            <param name="interfaceGraph">The <see cref="T:MulticutInTrees.Graphs.IGraph`1"/> to create this new <see cref="T:MulticutInTrees.Graphs.Graph`1"/> from.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.HasNode(`0)">
            <summary>
            Finds whether <paramref name="node"/> is part of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
            <param name="node">The <typeparamref name="N"/> for which we want to know if it is part of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="node"/> is part of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.HasEdge(`0,`0,System.Boolean)">
            <summary>
            Finds whether the edge between parameters <paramref name="origin"/> and <paramref name="directed"/> is part of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
            <inheritdoc/>
            <returns><see langword="true"/> if the edge between <paramref name="origin"/> and <paramref name="destination"/> exists in this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="origin"/> or <paramref name="destination"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotInGraphException">Thrown when either <paramref name="origin"/> or <paramref name="destination"/> is not part of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.HasEdge(System.ValueTuple{`0,`0},System.Boolean)">
            <summary>
            Finds whether the edge <paramref name="edge"/> exists in this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
            <param name="edge">The tuple of two <typeparamref name="N"/>s for which we want to know if it is part of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.</param>
            <param name="directed">Optional. If <see langword="true"/>, only the edge from the first to the second endpoint of <paramref name="edge"/> is checked. If <see langword="false"/>, also the inverse edge is checked.</param>
            <returns><see langword="true"/> if <paramref name="edge"/> exists in this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            Looks like "Graph with n nodes and m edges", where "n" and "m" are numbers.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.UpdateNodesInGraph">
            <summary>
            Update the nodes in this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.UpdateEdgesInGraph">
            <summary>
            Update the edges in this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.AddNode(`0)">
            <summary>
            Add a new <typeparamref name="N"/> <paramref name="node"/> to this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
            <param name="node">The <typeparamref name="N"/> to be added.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.AlreadyInGraphException">Thrown when <paramref name="node"/> is already part of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.AddNodes(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add multiple new <typeparamref name="N"/>s to this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="nodes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.AddEdge(`0,`0,System.Boolean)">
            <summary>
            Add an edge between <paramref name="origin"/> and <paramref name="destination"/> to this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="origin"/> or <paramref name="destination"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotInGraphException">Thrown when either <paramref name="origin"/> or <paramref name="destination"/> is not part of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.AlreadyInGraphException">Thrown when the edge to be added is already part of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.AddEdges(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`0}},System.Boolean)">
            <summary>
            Add multiple edges to this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="edges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.RemoveNode(`0)">
            <summary>
            Remove an <typeparamref name="N"/> from this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotInGraphException">Thrown when <paramref name="node"/> is not part of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove multiple <typeparamref name="N"/>s from this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="nodes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.RemoveAllEdgesOfNode(`0,System.Boolean)">
            <summary>
            Removes all edges connected to a given <typeparamref name="N"/> from this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotInGraphException">Thrown when <paramref name="node"/> is not part of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.RemoveEdges(System.Collections.Generic.IList{System.ValueTuple{`0,`0}},System.Boolean)">
            <summary>
            Remove multiple edges from this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="edges"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.RemoveEdge(`0,`0,System.Boolean)">
            <summary>
            Remove an edge from this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            </summary>
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="origin"/> or <paramref name="destination"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotInGraphException">Thrown when <paramref name="origin"/>, <paramref name="destination"/> or the edge between them is not part of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.IsAcyclic">
            <summary>
            Checks whether this <see cref="T:MulticutInTrees.Graphs.Graph`1"/> is acyclic.
            </summary>
            <returns><see langword="true"/> if this <see cref="T:MulticutInTrees.Graphs.Graph`1"/> is acyclic, <see langword="false"/> if it is cyclic.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.Graph`1.IsConnected">
            <summary>
            Checks whether this <see cref="T:MulticutInTrees.Graphs.Graph`1"/> is connected.
            </summary>
            <returns><see langword="true"/> if this <see cref="T:MulticutInTrees.Graphs.Graph`1"/> is connected, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:MulticutInTrees.Graphs.IGraph`1">
            <summary>
            Interface for a general graph.
            </summary>
            <typeparam name="N">The type of nodes used in the graph.</typeparam>
        </member>
        <member name="P:MulticutInTrees.Graphs.IGraph`1.NumberOfNodes">
            <summary>
            The number of nodes in this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.IGraph`1.NumberOfEdges">
            <summary>
            The number of edges in this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.IGraph`1.Edges">
            <summary>
            The <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of all edges in the graph. Cannot be edited directly.
            <para>
            See also: <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.AddEdge(`0,`0,System.Boolean)"/>, <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.AddEdges(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`0}},System.Boolean)"/>, <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.RemoveEdge(`0,`0,System.Boolean)"/>, <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.RemoveEdges(System.Collections.Generic.IList{System.ValueTuple{`0,`0}},System.Boolean)"/> and <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.RemoveAllEdgesOfNode(`0,System.Boolean)"/>.
            </para>
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.IGraph`1.Nodes">
            <summary>
            The <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of all nodes in the graph. Cannot be edited directly.
            <para>
            See also: <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.AddNode(`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.AddNodes(System.Collections.Generic.IEnumerable{`0})"/>, <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.RemoveNode(`0)"/> and <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})"/>.
            </para>
            </summary>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.HasNode(`0)">
            <summary>
            Checks whether <paramref name="node"/> is part of this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
            <param name="node">The <typeparamref name="N"/> for which we want to know if it is part of this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="node"/> is part of this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.HasEdge(`0,`0,System.Boolean)">
            <summary>
            Checks whether an edge between <paramref name="origin"/> and <paramref name="destination"/> exists in this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
            <param name="origin">The first endpont of the edge.</param>
            <param name="destination">The other endpoint of the edge.</param>
            <param name="directed">Optional: if <see langword="true"/>, we only check for an edge from <paramref name="origin"/> to <paramref name="destination"/>. If <see langword="false"/>, we also check the edge from <paramref name="destination"/> to <paramref name="origin"/>.</param>
            <returns><see langword="true"/> if the edge between <paramref name="origin"/> and <paramref name="destination"/> exists in this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.HasEdge(System.ValueTuple{`0,`0},System.Boolean)">
            <summary>
            Checks whether the edge <paramref name="edge"/> exists in this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
            <param name="edge">The tuple of two <typeparamref name="N"/>s that defines the edge.</param>
            <param name="directed">Optional: if <see langword="true"/>, we only check for an edge from the first <typeparamref name="N"/> in <paramref name="edge"/> to the second <typeparamref name="N"/> in <paramref name="edge"/>. If <see langword="false"/>, we also check the edge from the second <typeparamref name="N"/> in <paramref name="edge"/> to the first <typeparamref name="N"/> in <paramref name="edge"/>.</param>
            <returns><see langword="true"/> if <paramref name="edge"/> exists in this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.AddNode(`0)">
            <summary>
            Add an <typeparamref name="N"/> to this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
            <param name="node">The <typeparamref name="N"/> to be added.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.AddNodes(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add multiple <typeparamref name="N"/>s to this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
            <param name="nodes">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="N"/>s to be added.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.AddEdge(`0,`0,System.Boolean)">
            <summary>
            Add an edge to this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
            <param name="origin">The first endpoint of the edge.</param>
            <param name="destination">The other endpoint of the edge.</param>
            <param name="directed">If <see langword="true"/>, only the edge from <paramref name="origin"/> to <paramref name="destination"/> is added. If <see langword="false"/>, the edge from <paramref name="destination"/> to <paramref name="origin"/> is added as well.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.AddEdges(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`0}},System.Boolean)">
            <summary>
            Add multiple edges to this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
            <param name="edges">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with a tuple for each edge to be added.</param>
            <param name="directed">If <see langword="true"/>, only the edge from the first element of each tuple to the second element of the same tuple is added. If <see langword="false"/>, the edge from the second to the first element is added as well.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.RemoveNode(`0)">
            <summary>
            Remove a <typeparamref name="N"/> from this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
            <param name="node">The <typeparamref name="N"/> to be removed.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove multiple <typeparamref name="N"/>s from this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
            <param name="nodes">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="N"/>s to be removed.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.RemoveEdge(`0,`0,System.Boolean)">
            <summary>
            Remove an edge from this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
            <param name="origin">The first endpoint of the edge.</param>
            <param name="destination">The other endpoint of the edge.</param>
            <param name="directed">If <see langword="true"/>, only the edge from <paramref name="origin"/> to <paramref name="destination"/> is removed. If <see langword="false"/>, the edge from <paramref name="destination"/> to <paramref name="origin"/> is removed as well.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.RemoveEdges(System.Collections.Generic.IList{System.ValueTuple{`0,`0}},System.Boolean)">
            <summary>
            Remove multiple edges from this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </summary>
            <param name="edges">An <see cref="T:System.Collections.Generic.IList`1"/> with a tuple for each edge to be removed.</param>
            <param name="directed">If <see langword="true"/>, only the edge from the first element of each tuple to the second element of the same tuple is removed. If <see langword="false"/>, the edge from the second to the first element is removed as well.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.RemoveAllEdgesOfNode(`0,System.Boolean)">
            <summary>
            Remove all edges that are connected to <paramref name="node"/>.
            </summary>
            <param name="node">The <typeparamref name="N"/> from which we want to remove all its edges.</param>
            <param name="directed">If <see langword="true"/>, only the outgoing edges from <paramref name="node"/> are removed. If <see langword="false"/>, the edges incoming to <paramref name="node"/> are removed as well.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.IsAcyclic">
            <summary>
            Checks whether this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/> is acyclic.
            </summary>
            <returns><see langword="true"/> if this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/> is acyclic, <see langword="false"/> if it is cyclic.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.IGraph`1.IsConnected">
            <summary>
            Checks whether this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/> is connected.
            </summary>
            <returns><see langword="true"/> if this <see cref="T:MulticutInTrees.Graphs.IGraph`1"/> is connected, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:MulticutInTrees.Graphs.INode`1">
            <summary>
            Interface for a node.
            </summary>
            <typeparam name="N">The type of node that implements <see cref="T:MulticutInTrees.Graphs.INode`1"/>.</typeparam>
        </member>
        <member name="P:MulticutInTrees.Graphs.INode`1.ID">
            <summary>
            The unique identifier of this <see cref="T:MulticutInTrees.Graphs.INode`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.INode`1.Neighbours">
            <summary>
            The <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of neighbours this <see cref="T:MulticutInTrees.Graphs.INode`1"/> is connected to. Cannot be edited directly.
            <para>
            When using this <see cref="T:MulticutInTrees.Graphs.INode`1"/> in combination with an <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>, refer to <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.AddEdge(`0,`0,System.Boolean)"/>, <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.AddEdges(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`0}},System.Boolean)"/>, <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.RemoveEdge(`0,`0,System.Boolean)"/>, <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.RemoveEdges(System.Collections.Generic.IList{System.ValueTuple{`0,`0}},System.Boolean)"/> and <seealso cref="M:MulticutInTrees.Graphs.IGraph`1.RemoveAllEdgesOfNode(`0,System.Boolean)"/>.
            <br/>
            When using this <see cref="T:MulticutInTrees.Graphs.INode`1"/> without an <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>, refer to <seealso cref="M:MulticutInTrees.Graphs.INode`1.AddNeighbour(`0,System.Boolean)"/>, <seealso cref="M:MulticutInTrees.Graphs.INode`1.AddNeighbours(System.Collections.Generic.IEnumerable{`0},System.Boolean)"/>, <seealso cref="M:MulticutInTrees.Graphs.INode`1.RemoveNeighbour(`0,System.Boolean)"/>, <seealso cref="M:MulticutInTrees.Graphs.INode`1.RemoveNeighbours(System.Collections.Generic.IEnumerable{`0},System.Boolean)"/> and <seealso cref="M:MulticutInTrees.Graphs.INode`1.RemoveAllNeighbours(System.Boolean)"/>.
            </para>
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.INode`1.Degree">
            <summary>
            The degree of this <see cref="T:MulticutInTrees.Graphs.INode`1"/> in the graph.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Graphs.INode`1.AddNeighbour(`0,System.Boolean)">
            <summary>
            Add an <typeparamref name="N"/> as neighbour to this <see cref="T:MulticutInTrees.Graphs.INode`1"/>.
            </summary>
            <para>
            <b>Note:</b> When using this <see cref="T:MulticutInTrees.Graphs.INode`1"/> in combination with an <see cref="T:MulticutInTrees.Graphs.IGraph`1"/> or any other graph, please use the graph's methods to add children. Changes made using these methods are not reflected in the graph.
            </para>
            <param name="neighbour">The <typeparamref name="N"/> to be added as neighbour.</param>
            <param name="directed"><b>Optional.</b> Whether the connection is directed. If <see langword="true"/>, only a connection between this <see cref="T:MulticutInTrees.Graphs.INode`1"/> and <paramref name="neighbour"/> is made. If <see langword="false"/>, the connection from <paramref name="neighbour"/> to this <see cref="T:MulticutInTrees.Graphs.INode`1"/> is also made.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.INode`1.AddNeighbours(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Add multiple <typeparamref name="N"/>s as neighbours to this <see cref="T:MulticutInTrees.Graphs.INode`1"/>.
            </summary>
            <para>
            <b>Note:</b> When using this <see cref="T:MulticutInTrees.Graphs.INode`1"/> in combination with an <see cref="T:MulticutInTrees.Graphs.IGraph`1"/> or any other graph, please use the graph's methods to add children. Changes made using these methods are not reflected in the graph.
            </para>
            <param name="neighbours">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="N"/>s to be added as neighbours to this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.</param>
            <param name="directed"><b>Optional.</b> Whether the connection is directed. If <see langword="true"/>, only the connections between this <see cref="T:MulticutInTrees.Graphs.INode`1"/> and the <typeparamref name="N"/>s in <paramref name="neighbours"/> are made. If <see langword="false"/>, the connections from the <typeparamref name="N"/>s in <paramref name="neighbours"/> to this <see cref="T:MulticutInTrees.Graphs.INode`1"/> are also made.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.INode`1.RemoveAllNeighbours(System.Boolean)">
            <summary>
            Remove all neighbours from this <see cref="T:MulticutInTrees.Graphs.INode`1"/>.
            <para>
            <b>Note:</b> When using this <see cref="T:MulticutInTrees.Graphs.INode`1"/> in combination with an <see cref="T:MulticutInTrees.Graphs.IGraph`1"/> or any other graph, please use the graph's methods to add children. Changes made using these methods are not reflected in the graph.
            </para>
            </summary>
            <param name="directed"><b>Optional.</b> If <see langword="true"/>, only outgoing connections are removed. If <see langword="false"/>, incoming connections are removed as well.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.INode`1.RemoveNeighbour(`0,System.Boolean)">
            <summary>
            Remove <paramref name="neighbour"/> from the neighbours of this <see cref="T:MulticutInTrees.Graphs.INode`1"/>.
            </summary>
            <para>
            <b>Note:</b> When using this <see cref="T:MulticutInTrees.Graphs.INode`1"/> in combination with an <see cref="T:MulticutInTrees.Graphs.IGraph`1"/> or any other graph, please use the graph's methods to add children. Changes made using these methods are not reflected in the graph.
            </para>
            <param name="neighbour">The <typeparamref name="N"/> to be removed from the neighbours of this <see cref="T:MulticutInTrees.Graphs.INode`1"/>.</param>
            <param name="directed"><b>Optional.</b> Whether the connection is directed. If <see langword="true"/>, only the connection between this <see cref="T:MulticutInTrees.Graphs.INode`1"/> and <paramref name="neighbour"/> will be removed. If <see langword="false"/>, the connection from <paramref name="neighbour"/> to this <see cref="T:MulticutInTrees.Graphs.INode`1"/> will be removed as well.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.INode`1.RemoveNeighbours(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Remove multiple <typeparamref name="N"/>s from the neighbours of this <see cref="T:MulticutInTrees.Graphs.INode`1"/>.
            </summary>
            <para>
            <b>Note:</b> When using this <see cref="T:MulticutInTrees.Graphs.INode`1"/> in combination with an <see cref="T:MulticutInTrees.Graphs.IGraph`1"/> or any other graph, please use the graph's methods to add children. Changes made using these methods are not reflected in the graph.
            </para>
            <param name="neighbours">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="N"/>s to be removed from the neighbours of this <see cref="T:MulticutInTrees.Graphs.INode`1"/>.</param>
            <param name="directed"><b>Optional.</b> Whether the connections are directed. If <see langword="true"/>, only the connections between this <see cref="T:MulticutInTrees.Graphs.INode`1"/> and the <typeparamref name="N"/>s in <paramref name="neighbours"/> will be removed. If <see langword="false"/>, the connections from the <typeparamref name="N"/>s in <paramref name="neighbours"/> to this <see cref="T:MulticutInTrees.Graphs.INode`1"/> will be removed as well.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.INode`1.HasNeighbour(`0)">
            <summary>
            Checks whether <paramref name="node"/> is a neighbour of this <see cref="T:MulticutInTrees.Graphs.INode`1"/>.
            </summary>
            <param name="node">The <typeparamref name="N"/> for which we want to know if it is a neighbour of this <see cref="T:MulticutInTrees.Graphs.INode`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="node"/> is a neighbour of this <see cref="T:MulticutInTrees.Graphs.INode`1"/>, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:MulticutInTrees.Graphs.ITree`1">
            <summary>
            Interface for a tree.
            </summary>
            <typeparam name="N">The type of <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> the tree consists of.</typeparam>
        </member>
        <member name="P:MulticutInTrees.Graphs.ITree`1.NumberOfNodes">
            <summary>
            The number of nodes in this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.ITree`1.Root">
            <summary>
            The root of this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.ITree`1.Height">
            <summary>
            The height of this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>. This is the distance from the root to the leaf with furthest depth.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.ITree`1.Edges">
            <summary>
            The <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of all edges in the graph. Cannot be edited directly.
            <para>
            See also: <seealso cref="M:MulticutInTrees.Graphs.ITree`1.AddChild(`0,`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.ITree`1.AddChildren(`0,System.Collections.Generic.IEnumerable{`0})"/>, <seealso cref="M:MulticutInTrees.Graphs.ITree`1.AddRoot(`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.ITree`1.RemoveNode(`0)"/> and <seealso cref="M:MulticutInTrees.Graphs.ITree`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})"/>.
            </para>
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.ITree`1.Nodes">
            <summary>
            The <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of all nodes in the graph. Cannot be edited directly.
            <para>
            See also: <seealso cref="M:MulticutInTrees.Graphs.ITree`1.AddChild(`0,`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.ITree`1.AddChildren(`0,System.Collections.Generic.IEnumerable{`0})"/>, <seealso cref="M:MulticutInTrees.Graphs.ITree`1.AddRoot(`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.ITree`1.RemoveNode(`0)"/> and <seealso cref="M:MulticutInTrees.Graphs.ITree`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})"/>.
            </para>
            </summary>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITree`1.HasNode(`0)">
            <summary>
            Checks whether <paramref name="node"/> is part of this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.
            </summary>
            <param name="node">The <typeparamref name="N"/> for which we want to know if it is part of this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="node"/> is part of this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITree`1.HasEdge(`0,`0)">
            <summary>
            Checks whether the edge between <paramref name="parent"/> and <paramref name="child"/> is part of this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>. In other words, check whether <paramref name="parent"/> is the parent of <paramref name="child"/>.
            </summary>
            <param name="parent">The <typeparamref name="N"/> that should be the parent of the connection.</param>
            <param name="child">The <typeparamref name="N"/> that should be the child of the connection.</param>
            <returns><see langword="true"/> if the edge between <paramref name="parent"/> and <paramref name="child"/> exists in this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITree`1.HasEdge(System.ValueTuple{`0,`0})">
            <summary>
            Checks whether the edge <paramref name="edge"/> is part of this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.
            </summary>
            <param name="edge">The <see cref="T:System.ValueTuple`2"/> of <typeparamref name="N"/>s for which we want to know if it is part of this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="edge"/> exists in this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITree`1.AddRoot(`0)">
            <summary>
            Add a new root to this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.
            </summary>
            <param name="newRoot">The <typeparamref name="N"/> that will be the new root of this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITree`1.AddChild(`0,`0)">
            <summary>
            Add a new <typeparamref name="N"/> to this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.
            </summary>
            <param name="parent">The <typeparamref name="N"/> that will be the parent of the new <typeparamref name="N"/>. Should already be part of the <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.</param>
            <param name="child">The new <typeparamref name="N"/> that will be added as a child of <paramref name="parent"/> in this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITree`1.AddChildren(`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add multiple new <typeparamref name="N"/>s  to this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.
            </summary>
            <param name="parent">The <typeparamref name="N"/> that will be the parent of the new <typeparamref name="N"/>s. Should already be part of the <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.</param>
            <param name="children">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of new <typeparamref name="N"/>s that will be added as children of <paramref name="parent"/> in this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITree`1.RemoveNode(`0)">
            <summary>
            Removes an <typeparamref name="N"/> from this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.
            </summary>
            <param name="node">The <typeparamref name="N"/> to be removed.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITree`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes multiple <typeparamref name="N"/>s from this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.
            </summary>
            <param name="nodes">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="N"/>s to be removed.</param>
        </member>
        <member name="T:MulticutInTrees.Graphs.ITreeNode`1">
            <summary>
            Interface for a node to be used in a tree.
            </summary>
            <typeparam name="N">The type of node that implements <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>.</typeparam>
        </member>
        <member name="P:MulticutInTrees.Graphs.ITreeNode`1.Children">
            <summary>
            The <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of children this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> is connected to. Cannot be edited directly.
            <para>
            When using this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> in combination with an <see cref="T:MulticutInTrees.Graphs.ITree`1"/>, refer to <seealso cref="M:MulticutInTrees.Graphs.ITree`1.AddChild(`0,`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.ITree`1.AddChildren(`0,System.Collections.Generic.IEnumerable{`0})"/>, <seealso cref="M:MulticutInTrees.Graphs.ITree`1.RemoveNode(`0)"/> and <seealso cref="M:MulticutInTrees.Graphs.ITree`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})"/>.
            <br/>
            When using this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> without and <see cref="T:MulticutInTrees.Graphs.ITree`1"/>, refer to <seealso cref="M:MulticutInTrees.Graphs.ITreeNode`1.AddChild(`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.ITreeNode`1.AddChildren(System.Collections.Generic.IEnumerable{`0})"/>, <seealso cref="M:MulticutInTrees.Graphs.ITreeNode`1.RemoveChild(`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.ITreeNode`1.RemoveChildren(System.Collections.Generic.IEnumerable{`0})"/> and <seealso cref="M:MulticutInTrees.Graphs.ITreeNode`1.RemoveAllChildren"/>.
            </para>
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.ITreeNode`1.DepthFromRoot">
            <summary>
            The depth of this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> in the tree measured from the root.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.ITreeNode`1.HeightOfSubtree">
            <summary>
            The height of the subtree rooted at this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.ITreeNode`1.Parent">
            <summary>
            The parent of this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> in the tree. Cannot be edited directly.
            <para>
            When using this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> in combination with an <see cref="T:MulticutInTrees.Graphs.ITree`1"/>, refer to <seealso cref="M:MulticutInTrees.Graphs.ITree`1.AddChild(`0,`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.ITree`1.AddChildren(`0,System.Collections.Generic.IEnumerable{`0})"/>, <seealso cref="M:MulticutInTrees.Graphs.ITree`1.RemoveNode(`0)"/> and <seealso cref="M:MulticutInTrees.Graphs.ITree`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})"/>.
            <br/>
            When using this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> without and <see cref="T:MulticutInTrees.Graphs.ITree`1"/>, refer to <seealso cref="M:MulticutInTrees.Graphs.ITreeNode`1.AddChild(`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.ITreeNode`1.AddChildren(System.Collections.Generic.IEnumerable{`0})"/>, <seealso cref="M:MulticutInTrees.Graphs.ITreeNode`1.RemoveChild(`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.ITreeNode`1.RemoveChildren(System.Collections.Generic.IEnumerable{`0})"/> and <seealso cref="M:MulticutInTrees.Graphs.ITreeNode`1.RemoveAllChildren"/>.
            </para>
            </summary>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITreeNode`1.IsRoot">
            <summary>
            Checks whether this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> is the root of the tree it is in.
            </summary>
            <returns><see langword="true"/> if this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> is the root of its tree, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITreeNode`1.AddChild(`0)">
            <summary>
            Add an <typeparamref name="N"/> as child to this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>.
            <para>
            <b>Note:</b> When using this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> in combination with an <see cref="T:MulticutInTrees.Graphs.ITree`1"/> or any other graph, please use the graph's methods to add children. Changes made using these methods are not reflected in the graph.
            </para>
            </summary>
            <param name="child">The <typeparamref name="N"/> to be added as child.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITreeNode`1.AddChildren(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add multiple <typeparamref name="N"/>s as children to this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>.
            <para>
            <b>Note:</b> When using this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> in combination with an <see cref="T:MulticutInTrees.Graphs.ITree`1"/> or any other graph, please use the graph's methods to add children. Changes made using these methods are not reflected in the graph.
            </para>
            </summary>
            <param name="children">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="N"/>s to be added as children.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITreeNode`1.RemoveChild(`0)">
            <summary>
            Remove an <typeparamref name="N"/> from the children of this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>.
            <para>
            <b>Note:</b> When using this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> in combination with an <see cref="T:MulticutInTrees.Graphs.ITree`1"/> or any other graph, please use the graph's methods to add children. Changes made using these methods are not reflected in the graph.
            </para>
            </summary>
            <param name="child">The <typeparamref name="N"/> to be removed.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITreeNode`1.RemoveChildren(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove multiple <typeparamref name="N"/>s from the children of this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>.
            <para>
            <b>Note:</b> When using this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> in combination with an <see cref="T:MulticutInTrees.Graphs.ITree`1"/> or any other graph, please use the graph's methods to add children. Changes made using these methods are not reflected in the graph.
            </para>
            </summary>
            <param name="children">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="N"/>s to be removed from the children of this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITreeNode`1.RemoveAllChildren">
            <summary>
            Removes all children from this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>.
            <para>
            <b>Note:</b> When using this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> in combination with an <see cref="T:MulticutInTrees.Graphs.ITree`1"/> or any other graph, please use the graph's methods to add children. Changes made using these methods are not reflected in the graph.
            </para>
            </summary>
        </member>
        <member name="M:MulticutInTrees.Graphs.ITreeNode`1.HasChild(`0)">
            <summary>
            Checks whether <paramref name="node"/> is a child of this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>.
            </summary>
            <param name="node">The <typeparamref name="N"/> for which we want to know if it is a child of this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="node"/> is a child of this <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:MulticutInTrees.Graphs.Node">
            <summary>
            Implementation of <see cref="T:MulticutInTrees.Graphs.INode`1"/> to be used for nodes an undirected graph that is not a tree.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Node.InternalNeighbours">
            <summary>
            The internal <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Graphs.Node"/>s that are neighbours of this <see cref="T:MulticutInTrees.Graphs.Node"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Node.InternalUniqueNeighbours">
            <summary>
            The internal <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:MulticutInTrees.Graphs.Node"/>s that are neighbours of this <see cref="T:MulticutInTrees.Graphs.Node"/>. Using a <see cref="T:System.Collections.Generic.HashSet`1"/> makes lookups amortised faster.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Node.ID">
            <inheritdoc/>
            <value>The value of this identifier is given as paramter in the constructor.</value>
        </member>
        <member name="P:MulticutInTrees.Graphs.Node.Neighbours">
            <inheritdoc/>
        </member>
        <member name="P:MulticutInTrees.Graphs.Node.Degree">
            <inheritdoc/>
        </member>
        <member name="M:MulticutInTrees.Graphs.Node.#ctor(System.UInt32)">
            <summary>
            Constructor for a <see cref="T:MulticutInTrees.Graphs.Node"/>.
            <para>
            <b>Note:</b> Use this constructor when using this <see cref="T:MulticutInTrees.Graphs.Node"/> in combination with an <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </para>
            </summary>
            <param name="id">The unique identifier of this <see cref="T:MulticutInTrees.Graphs.Node"/>.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.Node.#ctor(System.UInt32,System.Collections.Generic.IEnumerable{MulticutInTrees.Graphs.Node},System.Boolean)">
            <summary>
            Constructor for a <see cref="T:MulticutInTrees.Graphs.Node"/>.
            <para>
            <b>Note:</b> DO NOT use this constructor when using this <see cref="T:MulticutInTrees.Graphs.Node"/> in combination with an <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </para>
            </summary>
            <param name="id">The unique identifier of this <see cref="T:MulticutInTrees.Graphs.Node"/>.</param>
            <param name="neighbours">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with <see cref="T:MulticutInTrees.Graphs.Node"/>s that are neighbours of this <see cref="T:MulticutInTrees.Graphs.Node"/>.</param>
            <param name="directed">Whether the connections to the <see cref="T:MulticutInTrees.Graphs.Node"/>s in <paramref name="neighbours"/> are directed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="neighbours"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Node.AddNeighbour(MulticutInTrees.Graphs.Node,System.Boolean)">
            <summary>
            Add another <see cref="T:MulticutInTrees.Graphs.Node"/> as neighbour to this <see cref="T:MulticutInTrees.Graphs.Node"/>.
            <para>
            <b>NOTE:</b> If this <see cref="T:MulticutInTrees.Graphs.Node"/> is part of a graph, the graph does not see this new neighbour. Please use <see cref="M:MulticutInTrees.Graphs.IGraph`1.AddEdge(`0,`0,System.Boolean)"/> instead.
            </para>
            </summary>
            <param name="neighbour">The new neighbour to be added.</param>
            <param name="directed">Wether the edge only goes in one direction.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter <paramref name="neighbour"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.AddNeighbourToSelfException">Thrown when parameter <paramref name="neighbour"/> is the same <see cref="T:MulticutInTrees.Graphs.Node"/> as the <see cref="T:MulticutInTrees.Graphs.Node"/> this method is called from.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.AlreadyANeighbourException">Thrown when paramter <paramref name="neighbour"/> is already a neighbour of this <see cref="T:MulticutInTrees.Graphs.Node"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Node.AddNeighbours(System.Collections.Generic.IEnumerable{MulticutInTrees.Graphs.Node},System.Boolean)">
            <summary>
            Add multiple <see cref="T:MulticutInTrees.Graphs.Node"/>s as neighbours to this <see cref="T:MulticutInTrees.Graphs.Node"/>. Uses <see cref="M:MulticutInTrees.Graphs.Node.AddNeighbour(MulticutInTrees.Graphs.Node,System.Boolean)"/> internally to add each neighbour individually.
            </summary>
            <para>
            <b>NOTE:</b> If this <see cref="T:MulticutInTrees.Graphs.Node"/> is part of a graph, the graph does not see this new neighbour. Please use <see cref="M:MulticutInTrees.Graphs.IGraph`1.AddEdge(`0,`0,System.Boolean)"/> instead.
            </para>
            <param name="neighbours">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> with neighbours to be added.</param>
            <param name="directed">Whether the connections are directed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="T:System.Collections.Generic.IEnumerable`1"/> parameter with neighbours is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Node.RemoveAllNeighbours(System.Boolean)">
            <summary>
            Removes all neighbours from this <see cref="T:MulticutInTrees.Graphs.Node"/>.
            <para>
            <b>NOTE:</b> If this <see cref="T:MulticutInTrees.Graphs.Node"/> is part of a graph, the graph does not see this new neighbour. Please use <see cref="M:MulticutInTrees.Graphs.IGraph`1.RemoveAllEdgesOfNode(`0,System.Boolean)"/> instead.
            </para>
            </summary>
            <param name="directed">Whether to remove only one direction of the connection.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.Node.RemoveNeighbour(MulticutInTrees.Graphs.Node,System.Boolean)">
            <summary>
            Removes a neighbour from this <see cref="T:MulticutInTrees.Graphs.Node"/>.
            </summary>
            <para>
            <b>NOTE:</b> If this <see cref="T:MulticutInTrees.Graphs.Node"/> is part of a graph, the graph does not see this new neighbour. Please use <see cref="M:MulticutInTrees.Graphs.IGraph`1.RemoveEdge(`0,`0,System.Boolean)"/> instead.
            </para>
            <param name="neighbour">The <see cref="T:MulticutInTrees.Graphs.Node"/> that should be removed from this neighbours of this <see cref="T:MulticutInTrees.Graphs.Node"/>.</param>
            <param name="directed">Whether to remove only one direction of the connection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter <paramref name="neighbour"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotANeighbourException">Thrown when the parameter <paramref name="neighbour"/> is not a neighbour of this <see cref="T:MulticutInTrees.Graphs.Node"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Node.RemoveNeighbours(System.Collections.Generic.IEnumerable{MulticutInTrees.Graphs.Node},System.Boolean)">
            <summary>
            Removes multiple neighbours from this <see cref="T:MulticutInTrees.Graphs.Node"/>. Uses <see cref="M:MulticutInTrees.Graphs.Node.RemoveNeighbour(MulticutInTrees.Graphs.Node,System.Boolean)"/> internally to remove each neighbour individually.
            </summary>
            <para>
            <b>NOTE:</b> If this <see cref="T:MulticutInTrees.Graphs.Node"/> is part of a graph, the graph does not see this new neighbour. Please use <see cref="M:MulticutInTrees.Graphs.IGraph`1.RemoveEdges(System.Collections.Generic.IList{System.ValueTuple{`0,`0}},System.Boolean)"/> instead.
            </para>
            <param name="neighbours">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> with neighbours to be removed.</param>
            <param name="directed">Whether to remove only one direction of the connection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="T:System.Collections.Generic.IEnumerable`1"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Node.HasNeighbour(MulticutInTrees.Graphs.Node)">
            <summary>
            Checks whether the parameter <paramref name="node"/> is a neighbour of this <see cref="T:MulticutInTrees.Graphs.Node"/>.
            </summary>
            <param name="node">The <see cref="T:MulticutInTrees.Graphs.Node"/> for which we want to know if it is a neighbour of this <see cref="T:MulticutInTrees.Graphs.Node"/>.</param>
            <returns><see langword="true"/> if parameter <paramref name="node"/> is a neighbour of this <see cref="T:MulticutInTrees.Graphs.Node"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter <paramref name="node"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Node.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:MulticutInTrees.Graphs.Node"/>.
            <br/>
            Looks like: "Node [ID]", where "[ID]" is the <see cref="P:MulticutInTrees.Graphs.Node.ID"/> of this <see cref="T:MulticutInTrees.Graphs.Node"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> representation of this <see cref="T:MulticutInTrees.Graphs.Node"/>.</returns>
        </member>
        <member name="T:MulticutInTrees.Graphs.Tree`1">
            <summary>
            A tree that implements <see cref="T:MulticutInTrees.Graphs.ITree`1"/> and consists of a class that implements <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Tree`1.InternalEdges">
            <summary>
            The internal <see cref="T:System.Collections.Generic.List`1"/> of edges in this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Tree`1.UniqueInternalEdges">
            <summary>
            The internal <see cref="T:System.Collections.Generic.HashSet`1"/> of edges in this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Tree`1.UniqueInternalNodes">
            <summary>
            The internal <see cref="T:System.Collections.Generic.HashSet`1"/> of nodes in this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Tree`1.InternalNodes">
            <summary>
            The internal <see cref="T:System.Collections.Generic.List`1"/> of nodes in this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Tree`1.NumberOfNodes">
            <summary>
            The number of nodes in this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Tree`1.NumberOfEdges">
            <summary>
            The number of edges in this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Tree`1.Edges">
            <summary>
            The publically visible collection of edges in this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>. Edges cannot be edited directly.
            <br/>
            See also: <seealso cref="M:MulticutInTrees.Graphs.Tree`1.AddRoot(`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.Tree`1.AddChild(`0,`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.Tree`1.AddChildren(`0,System.Collections.Generic.IEnumerable{`0})"/>, <seealso cref="M:MulticutInTrees.Graphs.Tree`1.RemoveNode(`0)"/> and <seealso cref="M:MulticutInTrees.Graphs.Tree`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Tree`1.Nodes">
            <summary>
            The publically visible collection of nodes in this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>. Nodes cannot be edited directly.
            <br/>
            See also: <seealso cref="M:MulticutInTrees.Graphs.Tree`1.AddRoot(`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.Tree`1.AddChild(`0,`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.Tree`1.AddChildren(`0,System.Collections.Generic.IEnumerable{`0})"/>, <seealso cref="M:MulticutInTrees.Graphs.Tree`1.RemoveNode(`0)"/> and <seealso cref="M:MulticutInTrees.Graphs.Tree`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Tree`1.Root">
            <summary>
            The root of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.Tree`1.Height">
            <summary>
            The depth of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>. Equal to the depth of the subtree of the <see cref="P:MulticutInTrees.Graphs.Tree`1.Root"/> of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Graphs.Tree`1.#ctor">
            <summary>
            Constructor for a <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Graphs.Tree`1.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.
            Looks like "Tree with n nodes, m edges and height h", where "n", "m" and "h" are numbers.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:MulticutInTrees.Graphs.Graph`1"/>.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.Tree`1.FindRoot">
            <summary>
            Get the root with information from <see cref="P:MulticutInTrees.Graphs.Tree`1.Nodes"/>.
            </summary>
            <returns>The first occurance of an <typeparamref name="N"/> in <see cref="P:MulticutInTrees.Graphs.Tree`1.Nodes"/> that is a root.</returns>
            <exception cref="T:MulticutInTrees.Exceptions.NoRootException">Thrown when there is no root in <see cref="P:MulticutInTrees.Graphs.Tree`1.Nodes"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.MultipleRootsException">Thrown when there are multiple roots in <see cref="P:MulticutInTrees.Graphs.Tree`1.Nodes"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Tree`1.AddChildrenToParent(`0)">
            <summary>
            Adds the children of <paramref name="node"/> as children to the parent of <paramref name="node"/>, and removes <paramref name="node"/> from this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            <br/>
            If <paramref name="node"/> is the root of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>, and it has a single child, its child will become the root. Otherwise, an <see cref="T:MulticutInTrees.Exceptions.MultipleRootsException"/> is thrown.
            </summary>
            <param name="node">The <typeparamref name="N"/> whose children we want to connect to its parent.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.MultipleRootsException">Thrown when <paramref name="node"/> is the root and has multiple children.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Tree`1.HasNode(`0)">
            <summary>
            Finds whether <paramref name="node"/> is part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
            <param name="node">The <typeparamref name="N"/> for which we want to know if it is part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="node"/> is part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Tree`1.HasEdge(`0,`0)">
            <summary>
            Finds whether the edge between parameters <paramref name="parent"/> and <paramref name="child"/> is part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
            <inheritdoc/>
            <returns><see langword="true"/> if the edge between <paramref name="parent"/> and <paramref name="child"/> exists in this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="parent"/> or <paramref name="child"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotInGraphException">Thrown when either <paramref name="parent"/> or <paramref name="child"/> is not part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Tree`1.HasEdge(System.ValueTuple{`0,`0})">
            <summary>
            Checks whether the edge <paramref name="edge"/> is part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
            <param name="edge">The <see cref="T:System.ValueTuple`2"/> of <typeparamref name="N"/>s for which we want to know if it is part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="edge"/> exists in this <see cref="T:MulticutInTrees.Graphs.ITree`1"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when either <typeparamref name="N"/> of <paramref name="edge"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotInGraphException">Thrown when either <typeparamref name="N"/> of <paramref name="edge"/> is not part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Tree`1.AddRoot(`0)">
            <summary>
            Add <paramref name="newRoot"/> as root to this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>. The old root (if it exists) becomes a child of <paramref name="newRoot"/>.
            </summary>
            <param name="newRoot">The <typeparamref name="N"/> that will be the new root of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="newRoot"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Tree`1.AddChild(`0,`0)">
            <summary>
            Add a new <typeparamref name="N"/> as child to <paramref name="parent"/>.
            </summary>
            <param name="parent">The <typeparamref name="N"/> that will be the parent of <paramref name="child"/>. Must already be part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.</param>
            <param name="child">The <typeparamref name="N"/> that will be the new child of <paramref name="parent"/>. Must not be part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="parent"/> or <paramref name="child"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotInGraphException">Thrown when <paramref name="parent"/> is not part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.AlreadyInGraphException">Thrown when <paramref name="child"/> is already part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Tree`1.AddChildren(`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add multiple new <typeparamref name="N"/> as children to <paramref name="parent"/>.
            </summary>
            <param name="parent">The <typeparamref name="N"/> that will be the parent of each <typeparamref name="N"/> in <paramref name="children"/>. Must already be part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.</param>
            <param name="children">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="N"/>s that will be the new children of <paramref name="parent"/>. Must not be part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="parent"/> or <paramref name="children"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Tree`1.RemoveNode(`0)">
            <summary>
            Add all children of <paramref name="node"/> to its parent, and then deletes <paramref name="node"/> from this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
            <param name="node">The <typeparamref name="N"/> to be removed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotInGraphException">Thrown when <paramref name="node"/> is not part of this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Tree`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove muliple nodes from this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>. Children of the nodes to be removed are added to the parent of the node to be removed.
            </summary>
            <param name="nodes">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="N"/>s to be removed from this <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="nodes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.Tree`1.IsValid">
            <summary>
            Checks if this <see cref="T:MulticutInTrees.Graphs.Tree`1"/> is valid: it has exactly 1 root, is acyclic, and is connected.
            </summary>
            <returns><see langword="true"/> if this <see cref="T:MulticutInTrees.Graphs.Tree`1"/> is valid, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:MulticutInTrees.Graphs.TreeNode">
            <summary>
            Implementation of <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/> to be used for nodes in a tree.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.TreeNode.InternalChildren">
            <summary>
            The internal <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s that are children of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.TreeNode.InternalUniqueChildren">
            <summary>
            The internal <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s that are children of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>. Using a <see cref="T:System.Collections.Generic.HashSet`1"/> makes lookups amortised faster.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.TreeNode.Children">
            <inheritdoc/>
        </member>
        <member name="P:MulticutInTrees.Graphs.TreeNode.Degree">
            <summary>
            The number of neighbours (children + parent) this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> has.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.TreeNode.DepthFromRoot">
            <inheritdoc/>
        </member>
        <member name="P:MulticutInTrees.Graphs.TreeNode.HeightOfSubtree">
            <inheritdoc/>
        </member>
        <member name="P:MulticutInTrees.Graphs.TreeNode.Parent">
            <summary>
            The internal representation for the parent of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.TreeNode.Neighbours">
            <summary>
            The <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of all neighbours of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>. Includes <see cref="P:MulticutInTrees.Graphs.TreeNode.Parent"/> and <see cref="P:MulticutInTrees.Graphs.TreeNode.Children"/>. Cannot be edited directly.
            <br/>
            When using this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> in combination with an <see cref="T:MulticutInTrees.Graphs.ITree`1"/>, refer to <seealso cref="M:MulticutInTrees.Graphs.ITree`1.AddChild(`0,`0)"/>, <seealso cref="M:MulticutInTrees.Graphs.ITree`1.AddChildren(`0,System.Collections.Generic.IEnumerable{`0})"/>, <seealso cref="M:MulticutInTrees.Graphs.ITree`1.RemoveNode(`0)"/> and <seealso cref="M:MulticutInTrees.Graphs.ITree`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})"/>.
            <br/>
            When using this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> without and <see cref="T:MulticutInTrees.Graphs.ITree`1"/>, refer to <seealso cref="M:MulticutInTrees.Graphs.TreeNode.AddChild(MulticutInTrees.Graphs.TreeNode)"/>, <seealso cref="M:MulticutInTrees.Graphs.TreeNode.AddChildren(System.Collections.Generic.IEnumerable{MulticutInTrees.Graphs.TreeNode})"/>, <seealso cref="M:MulticutInTrees.Graphs.TreeNode.RemoveChild(MulticutInTrees.Graphs.TreeNode)"/>, <seealso cref="M:MulticutInTrees.Graphs.TreeNode.RemoveChildren(System.Collections.Generic.IEnumerable{MulticutInTrees.Graphs.TreeNode})"/> and <seealso cref="M:MulticutInTrees.Graphs.TreeNode.RemoveAllChildren"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Graphs.TreeNode.ID">
            <summary>
            The unique identifier of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.#ctor(System.UInt32)">
            <summary>
            Constructor for a <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            <para>
            <b>Note:</b> Use this constructor when using this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> in combination with an <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </para>
            </summary>
            <param name="id">The unique identifier of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.#ctor(System.UInt32,MulticutInTrees.Graphs.TreeNode)">
            <summary>
            Constructor for a <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            <para>
            <b>Note:</b> DO NOT use this constructor when using this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> in combination with an <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </para>
            </summary>
            <param name="id">The unique identifier of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.</param>
            <param name="parent">The <see cref="T:MulticutInTrees.Graphs.TreeNode"/> that is the parent of the new <see cref="T:MulticutInTrees.Graphs.TreeNode"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="parent"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.#ctor(System.UInt32,MulticutInTrees.Graphs.TreeNode,System.Collections.Generic.IEnumerable{MulticutInTrees.Graphs.TreeNode})">
            <summary>
            Constructor for a <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            <para>
            <b>Note:</b> DO NOT use this constructor when using this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> in combination with an <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </para>
            </summary>
            <param name="id">The unique identifier of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.</param>
            <param name="parent">The <see cref="T:MulticutInTrees.Graphs.TreeNode"/> that is the parent of the new <see cref="T:MulticutInTrees.Graphs.TreeNode"/> instance.</param>
            <param name="children">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s containing the children of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="parent"/> or <paramref name="children"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.#ctor(System.UInt32,System.Collections.Generic.IEnumerable{MulticutInTrees.Graphs.TreeNode})">
            <summary>
            Constructor for a <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            <para>
            <b>Note:</b> DO NOT use this constructor when using this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> in combination with an <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.
            </para>
            </summary>
            <param name="id">The unique identifier of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.</param>
            <param name="children">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s containing the children of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="children"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.AddChild(MulticutInTrees.Graphs.TreeNode)">
            <summary>
            Add another <see cref="T:MulticutInTrees.Graphs.TreeNode"/> as child to this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            <para>
            <b>NOTE:</b> If this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> is part of a graph, the graph does not see this new neighbour. Please use <see cref="M:MulticutInTrees.Graphs.ITree`1.AddChild(`0,`0)"/> instead.
            </para>
            </summary>
            <param name="child">The <see cref="T:MulticutInTrees.Graphs.TreeNode"/> to be added as child.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="child"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.AddNeighbourToSelfException">Thrown when parameter <paramref name="child"/> is the same <see cref="T:MulticutInTrees.Graphs.TreeNode"/> as the <see cref="T:MulticutInTrees.Graphs.TreeNode"/> this method is called from.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.AddParentAsChildException">Thrown when parameter <paramref name="child"/> is the parent of the <see cref="T:MulticutInTrees.Graphs.TreeNode"/> this method is called from.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.AlreadyANeighbourException">Thrown when parameter <paramref name="child"/> is already a child of the <see cref="T:MulticutInTrees.Graphs.TreeNode"/> this method is called from.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.AddChildren(System.Collections.Generic.IEnumerable{MulticutInTrees.Graphs.TreeNode})">
            <summary>
            Add multiple <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s as children to this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>. Uses <see cref="M:MulticutInTrees.Graphs.TreeNode.AddChild(MulticutInTrees.Graphs.TreeNode)"/> internally to add each child individually.
            <para>
            <b>NOTE:</b> If this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> is part of a graph, the graph does not see this new neighbour. Please use <see cref="M:MulticutInTrees.Graphs.ITree`1.AddChildren(`0,System.Collections.Generic.IEnumerable{`0})"/> instead.
            </para>
            </summary>
            <param name="children">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> with children to be added.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="T:System.Collections.Generic.IEnumerable`1"/> parameter with children is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.RemoveChild(MulticutInTrees.Graphs.TreeNode)">
            <summary>
            Remove one of the children of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> from its children.
            <para>
            <b>NOTE:</b> If this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> is part of a graph, the graph does not see this new neighbour. Please use <see cref="M:MulticutInTrees.Graphs.ITree`1.RemoveNode(`0)"/> instead.
            </para>
            </summary>
            <param name="child">The <see cref="T:MulticutInTrees.Graphs.TreeNode"/> to be removed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="child"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotANeighbourException">Thrown when <paramref name="child"/> is not a child of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.RemoveChildren(System.Collections.Generic.IEnumerable{MulticutInTrees.Graphs.TreeNode})">
            <summary>
            Remove multiple <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s from the children of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>. Uses <see cref="M:MulticutInTrees.Graphs.TreeNode.RemoveChild(MulticutInTrees.Graphs.TreeNode)"/> internally to remove each child individually.
            <para>
            <b>NOTE:</b> If this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> is part of a graph, the graph does not see this new neighbour. Please use <see cref="M:MulticutInTrees.Graphs.ITree`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})"/> instead.
            </para>
            </summary>
            <param name="children">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> with children to be removed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="T:System.Collections.Generic.IEnumerable`1"/> parameter with children is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.RemoveAllChildren">
            <summary>
            Remove all children from this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            <para>
            <b>NOTE:</b> If this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> is part of a graph, the graph does not see this new neighbour. Please use <see cref="M:MulticutInTrees.Graphs.ITree`1.RemoveNodes(System.Collections.Generic.IEnumerable{`0})"/> instead.
            </para>
            </summary>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.HasChild(MulticutInTrees.Graphs.TreeNode)">
            <summary>
            Checks whether <paramref name="node"/> is a child of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            </summary>
            <param name="node">The <see cref="T:MulticutInTrees.Graphs.TreeNode"/> for which we want to check if it is a neighbour of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.</param>
            <returns><see langword="true"/> is <paramref name="node"/> is a child of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.IsRoot">
            <summary>
            Checks whether this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> is the root of the <see cref="T:MulticutInTrees.Graphs.ITree`1"/> it is in.
            <br/>
            It checks whether the parent of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> is <see langword="null"/>.
            </summary>
            <returns><see langword="true"/> if this <see cref="T:MulticutInTrees.Graphs.TreeNode"/> is the root of its <see cref="T:MulticutInTrees.Graphs.ITree`1"/>, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            <br/>
            Looks like: "TreeNode [ID]", where "[ID]" is the <see cref="P:MulticutInTrees.Graphs.TreeNode.ID"/> of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> representation of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.</returns>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.MulticutInTrees#Graphs#INode{MulticutInTrees#Graphs#TreeNode}#AddNeighbour(MulticutInTrees.Graphs.TreeNode,System.Boolean)">
            <summary>
            Calls <see cref="M:MulticutInTrees.Graphs.TreeNode.AddChild(MulticutInTrees.Graphs.TreeNode)"/>.
            </summary>
            <param name="neighbour"><inheritdoc cref="M:MulticutInTrees.Graphs.TreeNode.AddChild(MulticutInTrees.Graphs.TreeNode)"/></param>
            <param name="directed">Unused.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.MulticutInTrees#Graphs#INode{MulticutInTrees#Graphs#TreeNode}#AddNeighbours(System.Collections.Generic.IEnumerable{MulticutInTrees.Graphs.TreeNode},System.Boolean)">
            <summary>
            Calls <see cref="M:MulticutInTrees.Graphs.TreeNode.AddChildren(System.Collections.Generic.IEnumerable{MulticutInTrees.Graphs.TreeNode})"/>.
            </summary>
            <param name="neighbours"><inheritdoc cref="M:MulticutInTrees.Graphs.TreeNode.AddChildren(System.Collections.Generic.IEnumerable{MulticutInTrees.Graphs.TreeNode})"/></param>
            <param name="directed">Unused.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.MulticutInTrees#Graphs#INode{MulticutInTrees#Graphs#TreeNode}#RemoveAllNeighbours(System.Boolean)">
            <summary>
            Removes all children and parent from this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            </summary>
            <param name="directed">Unused.</param>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.MulticutInTrees#Graphs#INode{MulticutInTrees#Graphs#TreeNode}#RemoveNeighbour(MulticutInTrees.Graphs.TreeNode,System.Boolean)">
            <summary>
            Remove a <see cref="T:MulticutInTrees.Graphs.TreeNode"/> from the neighbours of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            </summary>
            <param name="neighbour">The neighbour to be removed.</param>
            <param name="directed">Unused.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="neighbour"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.MulticutInTrees#Graphs#INode{MulticutInTrees#Graphs#TreeNode}#RemoveNeighbours(System.Collections.Generic.IEnumerable{MulticutInTrees.Graphs.TreeNode},System.Boolean)">
            <summary>
            Remove multiple <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s from the neighbours of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            </summary>
            <param name="neighbours"></param>
            <param name="directed"></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="neighbours"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Graphs.TreeNode.MulticutInTrees#Graphs#INode{MulticutInTrees#Graphs#TreeNode}#HasNeighbour(MulticutInTrees.Graphs.TreeNode)">
            <summary>
            Checks whether <paramref name="node"/> is either the <see cref="P:MulticutInTrees.Graphs.TreeNode.Parent"/> or a child of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.
            </summary>
            <param name="node">The <see cref="T:MulticutInTrees.Graphs.TreeNode"/> for which we want to know if it is a neighbour of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>.</param>
            <returns><see langword="true"/> if <paramref name="node"/> is the parent or a child of this <see cref="T:MulticutInTrees.Graphs.TreeNode"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:MulticutInTrees.Graphs.NamespaceDoc">
            <summary>
            This part of the project contains all used graphs and nodes.
            </summary>
        </member>
        <member name="T:MulticutInTrees.Program">
            <summary>
            The entry class for the program.
            </summary>
        </member>
        <member name="F:MulticutInTrees.Program.Random">
            <summary>
            The global <see cref="T:System.Random"/> used throughout the entire program.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Program.Main">
            <summary>
            The entry method for the program.
            </summary>
        </member>
        <member name="T:MulticutInTrees.ReductionRules.DominatedEdge">
            <summary>
            <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/> that contracts an edge if all <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s whose path go over this edge also go over another edge.
            <br/>
            Rule: If all demand paths that pass through edge e_1 also pass through edge e_2, then contract e_1.
            </summary>
        </member>
        <member name="P:MulticutInTrees.ReductionRules.DominatedEdge.DemandPathsPerEdge">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> with edges represented by tuples of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s as key and a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s as value.
            The value is all the <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s whose path passes through the key.
            </summary>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.DominatedEdge.#ctor(MulticutInTrees.Graphs.Tree{MulticutInTrees.Graphs.TreeNode},System.Collections.Generic.List{MulticutInTrees.Utilities.DemandPair},MulticutInTrees.Algorithms.Algorithm,System.Collections.Generic.Dictionary{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode},System.Collections.Generic.List{MulticutInTrees.Utilities.DemandPair}})">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.ReductionRules.IdleEdge"/>.
            </summary>
            <param name="input">The input <see cref="T:MulticutInTrees.Graphs.Tree`1"/> of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s in the instance.</param>
            <param name="demandPairs">The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s in the instance.</param>
            <param name="algorithm">The <see cref="T:MulticutInTrees.Algorithms.Algorithm"/> this <see cref="T:MulticutInTrees.ReductionRules.IdleEdge"/> is part of.</param>
            <param name="demandPathsPerEdge">The <see cref="T:System.Collections.Generic.Dictionary`2"/> with edges represented by tuples of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s as key and a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s as value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="input"/>, <paramref name="demandPairs"/>, <paramref name="algorithm"/> or <paramref name="demandPathsPerEdge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.DominatedEdge.AllDemandPairsPassThroughAnotherEdge(System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode},System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode})">
            <summary>
            Checks whether we can contract <paramref name="contractEdge"/>. We can do this if all <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s passing through it also pass through <paramref name="otherEdge"/>.
            </summary>
            <param name="contractEdge">The edge for which we want to know whether we can contract it.</param>
            <param name="otherEdge">The edge we are comparing <paramref name="contractEdge"/> against.</param>
            <returns><see langword="true"/> if all <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s that pas through <paramref name="contractEdge"/> also pass through <paramref name="otherEdge"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when either endpoint of <paramref name="contractEdge"/> or <paramref name="otherEdge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.DominatedEdge.FindEdgesOnShortestDemandPathThroughEdge(System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode})">
            <summary>
            Finds all edges that are on the shortest <see cref="T:MulticutInTrees.Utilities.DemandPair"/> through <paramref name="edge"/>.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.DominatedEdge.AfterDemandPathChanged(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Collections.Generic.List{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode}},MulticutInTrees.Utilities.DemandPair}})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="changedEdgesPerDemandPairList"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.DominatedEdge.AfterDemandPathRemove(System.Collections.Generic.IEnumerable{MulticutInTrees.Utilities.DemandPair})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="removedDemandPairs"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.DominatedEdge.AfterEdgeContraction(System.Collections.Generic.IEnumerable{System.ValueTuple{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode},MulticutInTrees.Graphs.TreeNode,System.Collections.Generic.List{MulticutInTrees.Utilities.DemandPair}}})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contractedEdgeNodeTupleList"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.DominatedEdge.RunFirstIteration">
            <inheritdoc/>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.DominatedEdge.Preprocess">
            <inheritdoc/>
        </member>
        <member name="T:MulticutInTrees.ReductionRules.IdleEdge">
            <summary>
            <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/> that contracts edges that are not used by any <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s.
            <br/>
            Rule: If there is a tree edge with no demand path passing through it, contract this edge.
            </summary>
        </member>
        <member name="P:MulticutInTrees.ReductionRules.IdleEdge.DemandPathsPerEdge">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> with edges represented by tuples of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s as key and a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s as value.
            The value is all the <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s whose path passes through the key.
            </summary>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.IdleEdge.#ctor(MulticutInTrees.Graphs.Tree{MulticutInTrees.Graphs.TreeNode},System.Collections.Generic.List{MulticutInTrees.Utilities.DemandPair},MulticutInTrees.Algorithms.Algorithm,System.Collections.Generic.Dictionary{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode},System.Collections.Generic.List{MulticutInTrees.Utilities.DemandPair}})">
            <summary>
            Constructor for <see cref="T:MulticutInTrees.ReductionRules.IdleEdge"/>.
            </summary>
            <param name="input">The input <see cref="T:MulticutInTrees.Graphs.Tree`1"/> of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s in the instance.</param>
            <param name="demandPairs">The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s in the instance.</param>
            <param name="algorithm">The <see cref="T:MulticutInTrees.Algorithms.Algorithm"/> this <see cref="T:MulticutInTrees.ReductionRules.IdleEdge"/> is part of.</param>
            <param name="demandPathsPerEdge">The <see cref="T:System.Collections.Generic.Dictionary`2"/> with edges represented by tuples of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s as key and a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s as value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="input"/>, <paramref name="demandPairs"/>, <paramref name="algorithm"/> or <paramref name="demandPathsPerEdge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.IdleEdge.CanEdgeBeContracted(System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode})">
            <summary>
            Checks whether an edge can be contracted. This is the case when no demand pairs use this edge.
            </summary>
            <param name="edge">The tuple of two <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s for which we want to know if it can be contracted.</param>
            <returns><see langword="true"/> if we can contract <paramref name="edge"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when either <see cref="T:MulticutInTrees.Graphs.TreeNode"/> of <paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.IdleEdge.Preprocess">
            <inheritdoc/>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.IdleEdge.RunFirstIteration">
            <inheritdoc/>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.IdleEdge.AfterEdgeContraction(System.Collections.Generic.IEnumerable{System.ValueTuple{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode},MulticutInTrees.Graphs.TreeNode,System.Collections.Generic.List{MulticutInTrees.Utilities.DemandPair}}})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contractedEdgeNodeTupleList"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.IdleEdge.AfterDemandPathRemove(System.Collections.Generic.IEnumerable{MulticutInTrees.Utilities.DemandPair})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="removedDemandPairs"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.IdleEdge.AfterDemandPathChanged(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Collections.Generic.List{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode}},MulticutInTrees.Utilities.DemandPair}})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="changedEdgesPerDemandPairList"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:MulticutInTrees.ReductionRules.ReductionRule">
            <summary>
            Abstract class to be used as baseclass for each reduction rule.
            </summary>
        </member>
        <member name="P:MulticutInTrees.ReductionRules.ReductionRule.Input">
            <summary>
            The input <see cref="T:MulticutInTrees.Graphs.Tree`1"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.ReductionRules.ReductionRule.DemandPairs">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s in the instance.
            </summary>
        </member>
        <member name="P:MulticutInTrees.ReductionRules.ReductionRule.Algorithm">
            <summary>
            The <see cref="P:MulticutInTrees.ReductionRules.ReductionRule.Algorithm"/> this <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/> is used by.
            </summary>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.ReductionRule.#ctor(MulticutInTrees.Graphs.Tree{MulticutInTrees.Graphs.TreeNode},System.Collections.Generic.List{MulticutInTrees.Utilities.DemandPair},MulticutInTrees.Algorithms.Algorithm)">
            <summary>
            Constructor for a <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/>.
            </summary>
            <param name="input">The input <see cref="T:MulticutInTrees.Graphs.Tree`1"/> of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s in the instance.</param>
            <param name="demandPairs">The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s in the instance.</param>
            <param name="algorithm">The <see cref="P:MulticutInTrees.ReductionRules.ReductionRule.Algorithm"/> this <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/> is used by.</param>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.ReductionRule.Preprocess">
            <summary>
            Everything that needs to happen before the reduction rule can be executed.
            </summary>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.ReductionRule.RunFirstIteration">
            <summary>
            First iteration of this <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/>. There is no information about last iterations available.
            </summary>
            <returns><see langword="true"/> if this <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/> was applied successfully, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.ReductionRule.AfterEdgeContraction(System.Collections.Generic.IEnumerable{System.ValueTuple{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode},MulticutInTrees.Graphs.TreeNode,System.Collections.Generic.List{MulticutInTrees.Utilities.DemandPair}}})">
            <summary>
            Executed when this <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/> is applied after one or more edges have been contracted in the last iteration.
            </summary>
            <param name="contractedEdgeNodeTupleList">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with tuples consisting of a tuple of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s (the contracted edge), a <see cref="T:MulticutInTrees.Graphs.TreeNode"/> (the result of the edge contraction), and a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s (the <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s on the contracted edge).</param>
            <returns><see langword="true"/> if this <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/> was applied successfully, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.ReductionRule.AfterDemandPathRemove(System.Collections.Generic.IEnumerable{MulticutInTrees.Utilities.DemandPair})">
            <summary>
            Executed when this <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/> is applied after one or more <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s have been removed in the last iteration.
            </summary>
            <param name="removedDemandPairs">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s that were removed in the last iteration.</param>
            <returns><see langword="true"/> if this <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/> was applied successfully, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.ReductionRule.AfterDemandPathChanged(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Collections.Generic.List{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode}},MulticutInTrees.Utilities.DemandPair}})">
            <summary>
            Executed when this <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/> is applied after the endpoint of one or more <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s were changed in the last iteration.
            </summary>
            <param name="changedEdgesPerDemandPairList">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> with tuples with a <see cref="T:System.Collections.Generic.List`1"/> with tuples of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s that represent the edges that were removed from the demand path, and a <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.</param>
            <returns><see langword="true"/> if this <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/> was applied successfully, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:MulticutInTrees.ReductionRules.UnitPath">
            <summary>
            <see cref="T:MulticutInTrees.ReductionRules.ReductionRule"/> that finds paths of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s of length one and cuts the corresponding edges.
            <br/>
            Rule: If a demand path has length one, cut its edge e.
            </summary>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.UnitPath.#ctor(MulticutInTrees.Graphs.Tree{MulticutInTrees.Graphs.TreeNode},System.Collections.Generic.List{MulticutInTrees.Utilities.DemandPair},MulticutInTrees.Algorithms.Algorithm)">
            <summary>
            Constructor for the <see cref="T:MulticutInTrees.ReductionRules.UnitPath"/> rule.
            </summary>
            <param name="input">The <see cref="T:MulticutInTrees.Graphs.Tree`1"/> of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s in the instance.</param>
            <param name="demandPairs">The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Utilities.DemandPair"/>s in the instance.</param>
            <param name="algorithm">The <see cref="T:MulticutInTrees.Algorithms.Algorithm"/> this <see cref="T:MulticutInTrees.ReductionRules.UnitPath"/> rule is part of.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="input"/>, <paramref name="demandPairs"/> or <paramref name="algorithm"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.UnitPath.DemandPathHasLengthOne(MulticutInTrees.Utilities.DemandPair)">
            <summary>
            Returns whether a given <see cref="T:MulticutInTrees.Utilities.DemandPair"/> has a path of length one.
            </summary>
            <param name="demandPair">The <see cref="T:MulticutInTrees.Utilities.DemandPair"/> for which we want to know if its path has length one.</param>
            <returns><see langword="true"/> if the path of <paramref name="demandPair"/> has length one, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="demandPair"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.UnitPath.AfterDemandPathChanged(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Collections.Generic.List{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode}},MulticutInTrees.Utilities.DemandPair}})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="changedEdgesPerDemandPairList"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.UnitPath.AfterDemandPathRemove(System.Collections.Generic.IEnumerable{MulticutInTrees.Utilities.DemandPair})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="removedDemandPairs"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.UnitPath.AfterEdgeContraction(System.Collections.Generic.IEnumerable{System.ValueTuple{System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode},MulticutInTrees.Graphs.TreeNode,System.Collections.Generic.List{MulticutInTrees.Utilities.DemandPair}}})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contractedEdgeNodeTupleList"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.UnitPath.RunFirstIteration">
            <inheritdoc/>
        </member>
        <member name="M:MulticutInTrees.ReductionRules.UnitPath.Preprocess">
            <inheritdoc/>
        </member>
        <member name="T:MulticutInTrees.ReductionRules.NamespaceDoc">
            <summary>
            This part of the project contains the reduction rules used for kernelisation algorithms.
            </summary>
        </member>
        <member name="T:MulticutInTrees.Utilities.DemandPair">
            <summary>
            Class that represents a demand pair in the input.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Utilities.DemandPair.InternalDemandPath">
            <summary>
            The private <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s that represent all nodes on the path between the endpoints of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Utilities.DemandPair.InternalEdgesOnDemandPath">
            <summary>
            The private <see cref="T:System.Collections.Generic.List`1"/> of tuples of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s that represent the edges on the path between the endpoints of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Utilities.DemandPair.Node1">
            <summary>
            The first endpoint of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Utilities.DemandPair.Node2">
            <summary>
            The second endpoint of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Utilities.DemandPair.DemandPath">
            <summary>
            The publically visible <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of all <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s on the path between the endpoints of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.
            </summary>
        </member>
        <member name="P:MulticutInTrees.Utilities.DemandPair.EdgesOnDemandPath">
            <summary>
            The publically visible <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of tuples of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s that represent the edges on the path between the endpoints of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Utilities.DemandPair.#ctor(MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode)">
            <summary>
            Constructor for a <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.
            </summary>
            <param name="node1">The first endpoint of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.</param>
            <param name="node2">The second endpoint of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node1"/> or <paramref name="node2"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DemandPair.CreateEdgesOnPath">
            <summary>
            Creates the <see cref="T:System.Collections.Generic.List`1"/> of all edges on the path between <see cref="P:MulticutInTrees.Utilities.DemandPair.Node1"/> and <see cref="P:MulticutInTrees.Utilities.DemandPair.Node2"/> from <see cref="P:MulticutInTrees.Utilities.DemandPair.InternalDemandPath"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Utilities.DemandPair.ToString">
            <summary>
            Returns the <see cref="T:System.String"/> representation of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> representation of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.</returns>
        </member>
        <member name="M:MulticutInTrees.Utilities.DemandPair.ChangeEndpoint(MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode)">
            <summary>
            Executed when one of the endpoints of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/> changes.
            <br/>
            <b>NOTE:</b> A demand path can only be shortened. <paramref name="newEndpoint"/> should already be on the path between <see cref="P:MulticutInTrees.Utilities.DemandPair.Node1"/> and <see cref="P:MulticutInTrees.Utilities.DemandPair.Node2"/>.
            </summary>
            <param name="oldEndpoint">The old endpoint of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.</param>
            <param name="newEndpoint">The new endpoint of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="oldEndpoint"/> or <paramref name="newEndpoint"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotOnDemandPathException">Thrown when <paramref name="oldEndpoint"/> is not equal to <see cref="P:MulticutInTrees.Utilities.DemandPair.Node1"/> or <see cref="P:MulticutInTrees.Utilities.DemandPair.Node2"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.ZeroLengthDemandPathException">Thrown when <paramref name="newEndpoint"/> is equal to the endpoint that is not <paramref name="oldEndpoint"/>, meaning the result of this new <see cref="T:MulticutInTrees.Utilities.DemandPair"/> would be between the same two <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DemandPair.OnEdgeContracted(System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode},MulticutInTrees.Graphs.TreeNode)">
            <summary>
            Update this <see cref="T:MulticutInTrees.Utilities.DemandPair"/> when an edge on it was contracted.
            </summary>
            <param name="contractedEdge">The tuple of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s that represents the edge that was contracted.</param>
            <param name="newNode">The <see cref="T:MulticutInTrees.Graphs.TreeNode"/> that is the result of the contraction of <paramref name="contractedEdge"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the elements of <paramref name="contractedEdge"/> or <paramref name="newNode"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.ZeroLengthDemandPathException">Thrown when the contraction of <paramref name="contractedEdge"/> means this <see cref="T:MulticutInTrees.Utilities.DemandPair"/> now consists between the same nodes.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DemandPair.UpdateEndpointsAfterEdgeContraction(System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode},MulticutInTrees.Graphs.TreeNode)">
            <summary>
            Update <see cref="P:MulticutInTrees.Utilities.DemandPair.Node1"/> and <see cref="P:MulticutInTrees.Utilities.DemandPair.Node2"/> after an edge was contracted.
            </summary>
            <param name="contractedEdge">The tuple of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s that represents the edge that was contracted.</param>
            <param name="newNode">The <see cref="T:MulticutInTrees.Graphs.TreeNode"/> that is the result of the contraction of <paramref name="contractedEdge"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the elements of <paramref name="contractedEdge"/> or <paramref name="newNode"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DemandPair.UpdateNodesOnPathAfterEdgeContraction(System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode},MulticutInTrees.Graphs.TreeNode)">
            <summary>
            Update the nodes on the path of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/> after an edge was contracted.
            </summary>
            <param name="contractedEdge">The tuple of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s that represents the edge that was contracted.</param>
            <param name="newNode">The <see cref="T:MulticutInTrees.Graphs.TreeNode"/> that is the result of the contraction of <paramref name="contractedEdge"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the elements of <paramref name="contractedEdge"/> or <paramref name="newNode"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotOnDemandPathException">Thrown when <paramref name="contractedEdge"/> was not part of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DemandPair.UpdateEdgesOnPathAfterEdgeContraction(System.ValueTuple{MulticutInTrees.Graphs.TreeNode,MulticutInTrees.Graphs.TreeNode},MulticutInTrees.Graphs.TreeNode)">
            <summary>
            Update the edges on the path of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/> after an edge was contracted.
            </summary>
            <param name="contractedEdge">The tuple of <see cref="T:MulticutInTrees.Graphs.TreeNode"/>s that represents the edge that was contracted.</param>
            <param name="newNode">The <see cref="T:MulticutInTrees.Graphs.TreeNode"/> that is the result of the contraction of <paramref name="contractedEdge"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the elements of <paramref name="contractedEdge"/> or <paramref name="newNode"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NotOnDemandPathException">Thrown when <paramref name="contractedEdge"/> was not part of this <see cref="T:MulticutInTrees.Utilities.DemandPair"/>.</exception>
        </member>
        <member name="T:MulticutInTrees.Utilities.DFS">
            <summary>
            Class for Depth First Search
            </summary>
        </member>
        <member name="M:MulticutInTrees.Utilities.DFS.FindConnectedComponent``1(``0,System.Collections.Generic.HashSet{``0})">
            <summary>
            Find all nodes that are connected to the given startnode.
            </summary>
            <typeparam name="N">Implementation of <see cref="T:MulticutInTrees.Graphs.INode`1"/>.</typeparam>
            <param name="startNode">The node to start with.</param>
            <param name="seen">Optional. Nodes in this <see cref="T:System.Collections.Generic.HashSet`1"/> will be skipped during the DFS.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with all <typeparamref name="N"/>s that are connected to <paramref name="startNode"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="startNode"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DFS.IsAcyclicGraph``2(``0)">
            <summary>
            Checks if a given graph of type <typeparamref name="G"/> is acyclic.
            </summary>
            <typeparam name="G">The type of graph.</typeparam>
            <typeparam name="N">The type of nodes in the graph.</typeparam>
            <param name="inputGraph">The <typeparamref name="G"/> for which we want to know if it is acyclic.</param>
            <returns><see langword="true"/> if <paramref name="inputGraph"/> is acyclic, <see langword="false"/> if it is cyclic.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="inputGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DFS.IsAcyclicTree``2(``0)">
            <summary>
            Checks if a given tree of type <typeparamref name="T"/> is acyclic.
            </summary>
            <typeparam name="T">The type of tree.</typeparam>
            <typeparam name="N">The type of nodes in the tree.</typeparam>
            <param name="inputTree">The <typeparamref name="T"/> for which we want to know if it is acyclic.</param>
            <returns><see langword="true"/> if <paramref name="inputTree"/> is acyclic, <see langword="false"/> if it is cyclic.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="inputTree"/> is <see langword="null"/>.</exception>
            <exception cref="T:MulticutInTrees.Exceptions.NoRootException">Thrown when the <see cref="P:MulticutInTrees.Graphs.ITree`1.Root"/> of <paramref name="inputTree"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DFS.FindConnectedComponent``1(``0,``0,System.Collections.Generic.HashSet{``0},System.Boolean,System.Boolean)">
            <summary>
            Find all nodes that are connected to the given startnode.
            </summary>
            <typeparam name="N">Implementation of <see cref="T:MulticutInTrees.Graphs.INode`1"/>.</typeparam>
            <param name="startNode">The node to start with.</param>
            <param name="findNode">The node that needs to be found, or <see langword="default"/> if there is none.</param>
            <param name="seen">Optional. Nodes in this <see cref="T:System.Collections.Generic.HashSet`1"/> will be skipped during the DFS.</param>
            <param name="acyclicCheck">Optional. If <see langword="true"/> and a cycle is encountered, an empty list will be returned. Ignored if <see langword="false"/>.</param>
            <param name="findPath">Optional. If <see langword="true"/>, <paramref name="findNode"/> should be given as well. The method will then return a list with all <typeparamref name="N"/>s on the path from <paramref name="startNode"/> to <paramref name="findNode"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with all <typeparamref name="N"/>s that are connected to <paramref name="startNode"/>.</returns>
        </member>
        <member name="M:MulticutInTrees.Utilities.DFS.FindAllConnectedComponents``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.HashSet{``0})">
            <summary>
            Find all connected components for an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="N"/>s.
            </summary>
            <typeparam name="N">Imlementation of <see cref="T:MulticutInTrees.Graphs.INode`1"/>.</typeparam>
            <param name="allNodes"><see cref="T:System.Collections.Generic.IEnumerable`1"/> with all <typeparamref name="N"/>s.</param>
            <param name="seen">Optional. Nodes in this <see cref="T:System.Collections.Generic.HashSet`1"/> will be skipped during the DFS.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of connected components, where each connected component is also a <see cref="T:System.Collections.Generic.List`1"/> by itself.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="allNodes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DFS.AreConnected``1(``0,``0,System.Collections.Generic.HashSet{``0})">
            <summary>
            Checks whether two <typeparamref name="N"/>s are connected to each other.
            </summary>
            <typeparam name="N">Implementation of <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>.</typeparam>
            <param name="node1">The first <typeparamref name="N"/>.</param>
            <param name="node2">The second <typeparamref name="N"/>.</param>
            <param name="seen">Optional. Nodes in this <see cref="T:System.Collections.Generic.HashSet`1"/> will be skipped during the DFS.</param>
            <returns><see langword="true"/> if <paramref name="node1"/> and <paramref name="node2"/> are connected, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node1"/> or <paramref name="node2"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DFS.FindPathBetween``1(``0,``0,System.Collections.Generic.HashSet{``0})">
            <summary>
            Finds all <typeparamref name="N"/>s on the path from <paramref name="node1"/> to <paramref name="node2"/>.
            </summary>
            <typeparam name="N">Implementation of <see cref="T:MulticutInTrees.Graphs.INode`1"/>.</typeparam>
            <param name="node1">The start <typeparamref name="N"/>.</param>
            <param name="node2">The goal <typeparamref name="N"/>.</param>
            <param name="seen">Optional. <typeparamref name="N"/>s in this <see cref="T:System.Collections.Generic.HashSet`1"/> will be skipped during the DFS.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of <typeparamref name="N"/>s with all <typeparamref name="N"/>s on the path from <paramref name="node1"/> to <paramref name="node2"/>/</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node1"/> or <paramref name="node2"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DFS.FindAllEdgesGraph``2(``0)">
            <summary>
            Finds all edges in <paramref name="graph"/>.
            </summary>
            <typeparam name="G">The type of graph. Must implement <see cref="T:MulticutInTrees.Graphs.IGraph`1"/>.</typeparam>
            <typeparam name="N">The type of nodes in the graph. Must implement <see cref="T:MulticutInTrees.Graphs.INode`1"/>.</typeparam>
            <param name="graph">The <typeparamref name="G"/> in which we want to find all edges.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of tuples of <typeparamref name="N"/>s that represent the edges.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DFS.FindAllEdgesTree``2(``0)">
            <summary>
            Finds all edges in <paramref name="tree"/>.
            </summary>
            <typeparam name="T">The type of tree. Must implement <see cref="T:MulticutInTrees.Graphs.ITree`1"/>.</typeparam>
            <typeparam name="N">The type of nodes in the tree. Must implement <see cref="T:MulticutInTrees.Graphs.ITreeNode`1"/>.</typeparam>
            <param name="tree">The <typeparamref name="T"/> in which we want to find all edges.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of tuples of <typeparamref name="N"/>s that represent the edges.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="tree"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:MulticutInTrees.Utilities.DinicMaxFlow">
            <summary>
            Implementation of Dinic's algorithm for maximum flow in a graph.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Utilities.DinicMaxFlow.MaxFlowMultipleSourcesSinksUnitCapacities``2(``0,System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Compute the maximum flow in <paramref name="inputGraph"/> for multiple sources and sinks and unit capacities for each edge.
            </summary>
            <typeparam name="G">The type of graph used.</typeparam>
            <typeparam name="N">The type of nodes in the graph.</typeparam>
            <param name="inputGraph">The <typeparamref name="G"/> in which we want to compute the flow.</param>
            <param name="sources">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> with source <typeparamref name="N"/>s. If there can depart multiple units of flow from an <typeparamref name="N"/>, add it that many times to <paramref name="sources"/>.</param>
            <param name="sinks">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> with sink <typeparamref name="N"/>s. If there can arrive multiple units of flow to an <typeparamref name="N"/>, add it that many times to <paramref name="sinks"/>.</param>
            <returns>The maximum flow in <paramref name="inputGraph"/> between all <typeparamref name="N"/>s in <paramref name="sources"/> and <paramref name="sinks"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="inputGraph"/>, <paramref name="sinks"/> or <paramref name="sources"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DinicMaxFlow.MaxFlowMultipleSourcesSinks``2(``0,System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.Dictionary{System.ValueTuple{System.UInt32,System.UInt32},System.Int32})">
            <summary>
            Compute the maximum flow in <paramref name="inputGraph"/> for multiple sources and sinks and arbitrary capacities for each edge.
            </summary>
            <typeparam name="G">The type of graph used.</typeparam>
            <typeparam name="N">The type of nodes in the graph.</typeparam>
            <param name="inputGraph">The <typeparamref name="G"/> in which we want to compute the flow.</param>
            <param name="sources">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> with source <typeparamref name="N"/>s. If there can depart multiple units of flow from an <typeparamref name="N"/>, add it that many times to <paramref name="sources"/>.</param>
            <param name="sinks">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> with sink <typeparamref name="N"/>s. If there can arrive multiple units of flow to an <typeparamref name="N"/>, add it that many times to <paramref name="sinks"/>.</param>
            <param name="capacities">The <see cref="T:System.Collections.Generic.Dictionary`2"/> with a tuple with <see cref="P:MulticutInTrees.Graphs.INode`1.ID"/>s that define the edges, and an <see cref="T:System.Int32"/> that defines the capacity on this edge. Each capacity is directed.</param>
            <returns>The maximum flow in <paramref name="inputGraph"/> between all <typeparamref name="N"/>s in <paramref name="sources"/> and <paramref name="sinks"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="inputGraph"/>, <paramref name="sinks"/> or <paramref name="sources"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when there is an edge in <paramref name="inputGraph"/> that does not have a capacity in <paramref name="capacities"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DinicMaxFlow.MaxFlowUnitCapacities``2(``0,``1,``1)">
            <summary>
            Compute the maximum flow in <paramref name="inputGraph"/> with a single source and sink and unit capacities for each edge.
            </summary>
            <typeparam name="G">The type of graph used.</typeparam>
            <typeparam name="N">The type of nodes in the graph.</typeparam>
            <param name="inputGraph">The <typeparamref name="G"/> in which we want to compute the flow.</param>
            <param name="source">The <typeparamref name="N"/> that is the source of the flow.</param>
            <param name="sink">The <typeparamref name="N"/> that is the sink of the flow.</param>
            <returns>The maximum flow in <paramref name="inputGraph"/> between <paramref name="source"/> and <paramref name="sink"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="inputGraph"/>, <paramref name="sink"/> or <paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DinicMaxFlow.MaxFlow``2(``0,``1,``1,System.Collections.Generic.Dictionary{System.ValueTuple{System.UInt32,System.UInt32},System.Int32})">
            <summary>
            Compute the maximum flow in <paramref name="inputGraph"/> with a single source and sink and arbitrary capacities for each edge.
            </summary>
            <typeparam name="G">The type of graph used.</typeparam>
            <typeparam name="N">The type of nodes in the graph.</typeparam>
            <param name="inputGraph">The <typeparamref name="G"/> in which we want to compute the flow.</param>
            <param name="source">The <typeparamref name="N"/> that is the source of the flow.</param>
            <param name="sink">The <typeparamref name="N"/> that is the sink of the flow.</param>
            <param name="capacities">The <see cref="T:System.Collections.Generic.Dictionary`2"/> with a tuple with <see cref="P:MulticutInTrees.Graphs.INode`1.ID"/>s that define the edges, and an <see cref="T:System.Int32"/> that defines the capacity on this edge. Each capacity is directed.</param>
            <returns>The maximum flow in <paramref name="inputGraph"/> between <paramref name="source"/> and <paramref name="sink"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="inputGraph"/>, <paramref name="sink"/> or <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when there is an edge in <paramref name="inputGraph"/> that does not have a capacity in <paramref name="capacities"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DinicMaxFlow.FindLevels``2(``0,``1,System.Collections.Generic.Dictionary{System.ValueTuple{System.UInt32,System.UInt32},System.Int32},System.Collections.Generic.Dictionary{System.ValueTuple{System.UInt32,System.UInt32},System.Int32})">
            <summary>
            Find the level of each <typeparamref name="N"/> in <typeparamref name="G"/>.
            </summary>
            <typeparam name="G">The type of graph used.</typeparam>
            <typeparam name="N">The type of nodes in the graph.</typeparam>
            <param name="inputGraph">The <typeparamref name="G"/> in which we are computing the flow.</param>
            <param name="source">The origin of the flow.</param>
            <param name="flow">The <see cref="T:System.Collections.Generic.Dictionary`2"/> with the current flow per edge.</param>
            <param name="capacities">The <see cref="T:System.Collections.Generic.Dictionary`2"/> with the capacity for each edge.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> with the level for each <typeparamref name="N"/> from <paramref name="source"/>. The level is equal to -1 if no flow can be sent through this <typeparamref name="N"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="inputGraph"/>, <paramref name="source"/>, <paramref name="flow"/> or <paramref name="capacities"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.DinicMaxFlow.SendFlow``2(``0,``1,``1,System.Int32,System.Collections.Generic.Dictionary{System.ValueTuple{System.UInt32,System.UInt32},System.Int32},System.Collections.Generic.Dictionary{System.ValueTuple{System.UInt32,System.UInt32},System.Int32},System.Collections.Generic.Dictionary{System.UInt32,System.Int32})">
            <summary>
            Send as much flow as possible from <paramref name="node"/> to <paramref name="sink"/>.
            </summary>
            <typeparam name="G">The type of graph used.</typeparam>
            <typeparam name="N">The type of nodes in the graph.</typeparam>
            <param name="inputGraph">The <typeparamref name="G"/> in which we are computing the flow.</param>
            <param name="node">The current <typeparamref name="N"/>.</param>
            <param name="sink">The sink of the flow.</param>
            <param name="currentFlow">The current flow as found thus far.</param>
            <param name="flow">The <see cref="T:System.Collections.Generic.Dictionary`2"/> with the current flow per edge.</param>
            <param name="capacities">The <see cref="T:System.Collections.Generic.Dictionary`2"/> with the capacity for each edge.</param>
            <param name="levels">The <see cref="T:System.Collections.Generic.Dictionary`2"/> with the level of each node.</param>
            <returns>The maximum extra flow we can send from <paramref name="node"/> to <paramref name="sink"/> considering current flow and edge capacities.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="inputGraph"/>, <paramref name="node"/>, <paramref name="sink"/>, <paramref name="flow"/>, <paramref name="capacities"/> or <paramref name="levels"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:MulticutInTrees.Utilities.FisherYates">
            <summary>
            Class that shuffles the elements of an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Utilities.FisherYates.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the indices of the elements in <paramref name="list"/> using the Fisher-Yates method.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/> to be shuffled. Cannot be readonly.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="list"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when <paramref name="list"/> is readonly.</exception>
        </member>
        <member name="T:MulticutInTrees.Utilities.Utils">
            <summary>
            Static class containing utility functions used throughout the entire program.
            </summary>
        </member>
        <member name="M:MulticutInTrees.Utilities.Utils.NullCheck``1(``0,System.String,System.String)">
            <summary>
            Method that checks whether <paramref name="parameter"/> is <see langword="null"/>. Throws an <see cref="T:System.ArgumentNullException"/> if it is.
            </summary>
            <typeparam name="T">The type of <paramref name="parameter"/>.</typeparam>
            <param name="parameter">The <typeparamref name="T"/> for which we want to check if it is <see langword="null"/>.</param>
            <param name="paramName">The name of <paramref name="parameter"/> in the method this is called from.</param>
            <param name="message">Optional. The custom message that should be given to the <see cref="T:System.ArgumentNullException"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="parameter"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.Utils.OrderEdgeSmallToLarge``1(System.ValueTuple{``0,``0})">
            <summary>
            Orders a tuple of <typeparamref name="N"/>s representing an edge in such a way that the <typeparamref name="N"/> with the smallest <see cref="P:MulticutInTrees.Graphs.INode`1.ID"/> is the first element of the resulting tuple.
            </summary>
            <typeparam name="N">The type of nodes the edge is between. Implementation of <see cref="T:MulticutInTrees.Graphs.INode`1"/>.</typeparam>
            <param name="edge">The tuple of <typeparamref name="N"/>s representing the edge we want to order.</param>
            <returns>A tuple with the same <typeparamref name="N"/>s as <paramref name="edge"/>, such that the <typeparamref name="N"/> with the smallest <see cref="P:MulticutInTrees.Graphs.INode`1.ID"/> is the first element in the result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown whein either endpoint of <paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MulticutInTrees.Utilities.Utils.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether this <see cref="T:System.Collections.Generic.IEnumerable`1"/> is a subset of another <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="subset">The current <see cref="T:System.Collections.Generic.IEnumerable`1"/>, the potential subset.</param>
            <param name="largerSet">The other <see cref="T:System.Collections.Generic.IEnumerable`1"/>, the potential superset.</param>
            <returns><see langword="true"/> if <paramref name="subset"/> is a subset of <paramref name="largerSet"/>, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="subset"/> or <paramref name="largerSet"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:MulticutInTrees.Utilities.NamespaceDoc">
            <summary>
            This namespace contains several utility algorithms used throughout the project.
            </summary>
        </member>
        <member name="T:MulticutInTrees.NamespaceDoc">
            <summary>
            The main namespace of the project. This project implements multiple FPT algorithms to solve the <c>Multicut in Trees</c> problem.
            </summary>
        </member>
    </members>
</doc>
